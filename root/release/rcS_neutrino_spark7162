#!/bin/sh
#Version 230309.1

echo "[rcS] Start"
echo "Spark 7162 Neutrino"

MODDIR=/lib/modules

insmod $MODDIR/e2_proc.ko

echo "[rcS] Init frontpanel"
insmod $MODDIR/aotom.ko paramDebug=0

if [ -e /var/etc/.firstboot ]; then
   echo "Wait 1 min." > /dev/vfd
   echo "[rcS] WAIT 1 minute"
   rm /var/etc/.firstboot
   sleep 1
   touch /dev/.devfsd
else
   echo "Load 10" > /dev/vfd
   echo "[rcS] LOAD 10"
fi

/etc/init.d/mountvirtfs start

#if [ -e "$MODDIR/cpu_frequ.ko" ]; then
#   insmod $MODDIR/cpu_frequ.ko
#   cpufreq=`cat /etc/enigma2/settings | grep systemoptions.freq | cut -d "=" -f2`
#   case $cpufreq in
#      200) overclk=5123;;
#      300) overclk=2561;;
#      450) overclk=3841;;
#      500) overclk=12803;;
#      540) overclk=4609;;
#      600) overclk=5121;;
#      630) overclk=5377;;
#      650) overclk=16643;;
#      700) overclk=17923;;
#      710) overclk=18179;;
#      750) overclk=19203;;
#      775) overclk=39686;;
#      800) overclk=20483;;
#      *)   cpufreq=540
#           overclk=4609;;
#   esac
#   echo $overclk > /proc/cpu_frequ/pll0_ndiv_mdiv
#   echo "Setting CPU clock speed to $cpufreq MHz (overclk=$overclk)"
#fi

# Start automounter with umount timeout of 5 seconds
if [ -e $MODDIR/autofs4.ko ]; then
   insmod $MODDIR/autofs4.ko
fi
if [ -e /etc/init.d/automount ]; then
   /usr/sbin/automount --ghost --timeout=5 /autofs file /etc/auto.usb
fi

echo "[rcS] Starting DEBUG Interface"
/etc/init.d/mountall start
/etc/init.d/hostname start

echo -n "[rcS] Starting telnetd "
/usr/sbin/telnetd -l /bin/autologin
echo "with autologin"

echo "[rcS] Init stmfb (LOAD 9)"
echo "Load 9" > /dev/vfd
insmod $MODDIR/stmcore-display-sti7105.ko
insmod $MODDIR/stmfb.ko display0=1280x720-32@50:12m:pal:rgb:rgb #HDMI

echo "[rcS] Loading modules"

if [ ! -e /lib/firmware/audio.elf ] || [ ! -e /lib/firmware/video.elf ]; then
   echo "[rcS] Firmware(s) missing!"
   echo "FW MISSING!" > /dev/vfd
   sleep 5
fi

echo "[rcS] Load video firmware (LOAD 8)"
echo "Load 8" > /dev/vfd
/bin/dd if=/dev/zero of=/dev/st231-0 bs=1024 count=4096 2> /dev/null
/bin/ustslave /dev/st231-0 /lib/firmware/video.elf > /dev/null

echo "[rcS] Load audio firmware (LOAD 7)"
echo "Load 7" > /dev/vfd
/bin/dd if=/dev/zero of=/dev/st231-1 bs=1024 count=4096 2> /dev/null
if [ -e /lib/firmware/audio_dts.elf ]; then
   /bin/ustslave /dev/st231-1 /lib/firmware/audio_dts.elf > /dev/null
else
   /bin/ustslave /dev/st231-1 /lib/firmware/audio.elf > /dev/null
fi

echo "[rcS] Init embx (LOAD 6)"
echo "Load 6" > /dev/vfd
insmod $MODDIR/embxshell.ko
insmod $MODDIR/embxmailbox.ko mailbox0=0xfe211000:136:set2 mailbox1=0xfe212000:0
insmod $MODDIR/embxshm.ko mailbox0=shm:0:7:0x60000000:0:256:256:0:512:0x40000000:0x10000000
insmod $MODDIR/mme_host.ko transport0=shm

echo "[rcS] Init AVS (LOAD 5)"
echo "Load 5" > /dev/vfd
insmod $MODDIR/avs.ko type=avs_pio

player=`cat /proc/stb/player/version | awk '{ print substr( $0, length($0) - 2, length($0) ) }'`
echo "[rcS] Init player $player (LOAD 4)"
echo "Load 4" > /dev/vfd
insmod $MODDIR/mmelog.ko
insmod $MODDIR/ksound.ko
insmod $MODDIR/p2div64.ko
insmod $MODDIR/stm_v4l2.ko
insmod $MODDIR/stmvout.ko
insmod $MODDIR/stmvbi.ko
insmod $MODDIR/pseudocard.ko

#Set desired mode for tuner 3 here: t=DVB-T, c=DVB-C
tunertype='t'
echo "[rcS] Init frontend(s)"
insmod $MODDIR/spark7162.ko UnionTunerType=$tunertype

echo "[rcS] Initialize PTI"
insmod $MODDIR/pti.ko waitMS=20 videoMem=4096
if [ $? -ne 0 ]; then
   insmod $MODDIR/pti.ko
   echo "[rcS] Simple pti"
else
   echo "[rcS] Full feature pti"
fi
insmod $MODDIR/stm_monitor.ko
insmod $MODDIR/stmsysfs.ko
insmod $MODDIR/stmdvb.ko

echo "[rcS] Init player2 (LOAD 3)"
echo "Load 3" > /dev/vfd
insmod $MODDIR/player2.ko
insmod $MODDIR/sth264pp.ko
insmod $MODDIR/stmalloc.ko
insmod $MODDIR/platform.ko
insmod $MODDIR/silencegen.ko

insmod $MODDIR/bpamem.ko

echo "[rcS] Init cardreader"
insmod $MODDIR/smartcard.ko

if [ -e /boot/neutrinologo_720.mvi ]; then
   showiframe -p /boot/neutrinologo_720.mvi &
fi

stfbcontrol a 0

if [ -e $MODDIR/cec.ko ]; then
   echo "Init HDMI-CEC"
   insmod $MODDIR/cec.ko activemode=1
fi

if [ -e $MODDIR/exportfs.ko ]; then
   echo "[rcS] Init exportfs"
   insmod $MODDIR/exportfs.ko
fi
if [ -e $MODDIR/cifs.ko ]; then
   echo "[rcS] Init CIFS support"
   insmod $MODDIR/cifs.ko
fi
if [ -e $MODDIR/ntfs.ko ]; then
   echo "[rcS] Init NTFS support"
   insmod $MODDIR/ntfs.ko
fi
if [ -e $MODDIR/tun.ko ]; then
   echo "[rcS] Init tun support"
   insmod $MODDIR/tun.ko
fi
if [ -e $MODDIR/usbserial.ko ]; then
   insmod $MODDIR/usbserial.ko
   if [ -e $MODDIR/ch341.ko ]; then
      insmod $MODDIR/ch341.ko
   fi
   if [ -e $MODDIR/ftdi.ko ]; then
      echo "[rcS] Init FTDI USB serial support"
      insmod $MODDIR/ftdi.ko
   fi
   if [ -e $MODDIR/pl2303.ko ]; then
   echo "[rcS] Init PL2303 USB serial support"
      insmod $MODDIR/pl2303.ko
   fi
   if [ -e $MODDIR/option.ko ]; then
      insmod $MODDIR/option.ko
   fi
   if [ -e $MODDIR/usb_wwan.ko ]; then # 3G modem
      insmod $MODDIR/usb_wwan.ko
   fi
fi

echo "[rcS] Initialize remote control (LOAD 2)"
echo "Load 2" > /dev/vfd
mkdir -p /var/run/lirc
/usr/bin/lircd -u
/bin/evremote2 10 150 &

stfbcontrol a 255

echo "[rcS] Load extra modules"
# Load modules from /var/etc/modules.extra
[ -f /var/etc/modules.extra ] && eval `sed -e 's/#.*//' -e '/^\s*$/d' -e 's/^\(.*\)/insmod \0;/' < /var/etc/modules.extra`

NFS=`grep -c nfs /proc/cmdline`
if [ "$NFS" -eq "1" ]; then
   echo "[rcS] Booting from NFS, do not set network"
else
   if [ -e /etc/network/interfaces ]; then
      ip addr flush eth0
      /etc/init.d/networking stop
      DHCP=`grep -c 'iface eth0 inet dhcp' /etc/network/interfaces`
      if [ "$DHCP" -eq "1" ]; then
         echo "[rcS] Starting DHCP on eth0"
         /etc/init.d/udhcpc start
      fi
      /etc/init.d/networking start
   fi
fi
sleep 2

#wlan=rtl8188cu
if [ ! $wlan ] || [ ! -e $MODDIR/$wlan.ko ]; then
   echo "No WLAN"
else
   insmod $MODDIR/$wlan.ko
   echo "$wlan WLAN"
#   echo "$wlan WLAN" > /dev/vfd
#   sleep 3
fi

# Do own extras
if [ -e /etc/ownscript.sh ]; then
   /etc/ownscript.sh &
fi

# Try and synchronise time
if [ -x /usr/sbin/ntpd ]; then
   echo "Set internet time"
   (ntpd -n -p 0.europe.pool.ntp.org -q; /bin/fp_control -sst) &
else
   if [ -e /usr/sbin/time.sh ]; then
      echo "Use transponder time"
      /usr/sbin/time.sh &
   fi
fi

echo "[rcS] Init portmap & FTP (LOAD 1)"
echo "Load 1" > /dev/vfd
/etc/init.d/portmap start
/etc/init.d/vsftpd start
/usr/sbin/inetd

#tuner workaround
export FE_OFFSET=1

echo "[rcS] Loading Neutrino"
echo "Ld Neutr" > /dev/vfd

until false
do
#   killall -9 showiframe
   echo "[rcS] Starting Neutrino ->"
   /usr/bin/neutrino
   rtv=$?
   echo "[rcS] Neutrino ended <- return value: " $rtv
   case "$rtv" in
      0) echo "[rcS] SHUTDOWN"
         echo "Shutdown" > /dev/vfd
         init 0;;
      1) echo "[rcS] REBOOT"
         echo "Reboot" > /dev/vfd
         init 6;;
      3) echo "[rcS] RESTART"
         echo "Restart" > /dev/vfd
         ;;
      *) echo "[rcS] ERROR"
         echo "Error" > /dev/vfd
         init 6;;
   esac
done

#never reached
echo "[rcS] Reboot SPARK7162" > /dev/vfd
echo "REBOOT SPARK7162"
init 6
