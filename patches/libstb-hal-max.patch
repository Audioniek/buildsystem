--- libstb-hal-max/libeplayer3/input.cpp
+++ libstb-hal-max/libeplayer3/input.cpp
@@ -202,33 +202,44 @@
 			continue;
 		}
 		if (averror(err, av_read_frame)) // EOF?
+		{
 			break;		// while
-
+		}
 		player->readCount += packet.size;
 
 		AVStream *stream = avfc->streams[packet.stream_index];
 		Track *_videoTrack = videoTrack;
 		Track *_audioTrack = audioTrack;
 		Track *_subtitleTrack = subtitleTrack;
-		Track *_teletextTrack = teletextTrack;
-
-		if (_videoTrack && (_videoTrack->stream == stream)) {
+//		Track *_teletextTrack = teletextTrack;
+
+		if (_videoTrack && (_videoTrack->stream == stream))
+		{
 			int64_t pts = calcPts(stream, packet.pts);
 			if (audioSeen && !player->output.Write(stream, &packet, pts))
+			{
 				logprintf("writing data to video device failed\n");
-		} else if (_audioTrack && (_audioTrack->stream == stream)) {
-			if (restart_audio_resampling) {
+			}
+		}
+		else if (_audioTrack && (_audioTrack->stream == stream))
+		{
+			if (restart_audio_resampling)
+			{
 				restart_audio_resampling = false;
 				player->output.Write(stream, NULL, 0);
 			}
-			if (!player->isBackWard) {
+			if (!player->isBackWard)
+			{
 				int64_t pts = calcPts(stream, packet.pts);
 				if (!player->output.Write(stream, &packet, _videoTrack ? pts : 0))
 				logprintf("writing data to audio device failed\n");
 			}
 			audioSeen = true;
-		} else if (_subtitleTrack && (_subtitleTrack->stream == stream)) {
-			if (stream->codec->codec) {
+		}
+		else if (_subtitleTrack && (_subtitleTrack->stream == stream))
+		{
+			if (stream->codec->codec)
+			{
 				AVSubtitle sub;
 				memset(&sub, 0, sizeof(sub));
 				int got_sub_ptr = 0;
@@ -236,27 +247,37 @@
 				err = avcodec_decode_subtitle2(stream->codec, &sub, &got_sub_ptr, &packet);
 				averror(err, avcodec_decode_subtitle2);
 
-				if (got_sub_ptr && sub.num_rects > 0) {
-					switch (sub.rects[0]->type) {
+				if (got_sub_ptr && sub.num_rects > 0)
+				{
+					switch (sub.rects[0]->type)
+					{
 						case SUBTITLE_TEXT: // FIXME?
 						case SUBTITLE_ASS:
+						{
 							dvbsub_ass_write(stream->codec, &sub, _subtitleTrack->pid);
 							break;
-						case SUBTITLE_BITMAP: {
+						}
+						case SUBTITLE_BITMAP:
+						{
 							int64_t pts = calcPts(stream, packet.pts);
 							dvbsub_write(&sub, pts);
 							// avsubtitle_free() will be called by handler
 							break;
 						}
 						default:
+						{
 							break;
+						}
 					}
 				}
 			}
 		}
-//		else if (_teletextTrack && (_teletextTrack->stream == stream)) {
+//		else if (_teletextTrack && (_teletextTrack->stream == stream))
+//		{
 //			if (packet.data && packet.size > 1)
+//			{
 //				teletext_write(_teletextTrack->pid, packet.data + 1, packet.size - 1);
+//			}
 //		}
 
 #if (LIBAVFORMAT_VERSION_MAJOR == 57 && LIBAVFORMAT_VERSION_MINOR == 25)

