--- a/arch/sh/kernel/setup.c
+++ b/arch/sh/kernel/setup.c
@@ -389,6 +389,34 @@
 #endif
 #endif
 
+	{
+		char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+		char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock5 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 stmmaceth=ethaddr:";
+		char mac[] = "00:00:00:00:00:00";
+		int command_line_len = strlen(command_line);
+		int org_command_line_len = strlen(org_command_line);
+
+		if (command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+		{
+			int i;
+			for (i = 0; i < (command_line_len - 7); i++)
+			{
+				if (!strncmp(command_line + i, "ethaddr", 7))
+				{
+					strlcpy(mac, command_line + i + 8, sizeof(mac));
+					break;
+				}
+				if (!strncmp(command_line + i, "hwaddr", 6))
+				{
+					strlcpy(mac, command_line + i + 7, sizeof(mac));
+					break;
+				}
+			}
+			strlcpy(command_line, tdt_command_line, sizeof(command_line));
+			strlcat(command_line, mac, sizeof(command_line));
+		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
@@ -555,6 +583,7 @@
 	seq_printf(m, "cpu family\t: %s\n", init_utsname()->machine);
 	seq_printf(m, "cpu variant\t: %s\n", get_cpu_variant(c));
 	seq_printf(m, "cpu type\t: %s\n", get_cpu_subtype(c));
+	seq_printf(m, "cpu MHz\t\t: 450\n");
 	if (c->cut_major == -1)
 		seq_printf(m, "cut\t\t: unknown\n");
 	else if (c->cut_minor == -1)
--- a/arch/sh/boards/mach-mb680/setup.c
+++ b/arch/sh/boards/mach-mb680/setup.c
@@ -1,13 +1,16 @@
 /*
  * arch/sh/boards/st/mb680/setup.c
+*
+ * Modified for use on Fortis HS8200 by TDT, enhanced by Audioniek.
  *
+ * Original code by:
  * Copyright (C) 2008 STMicroelectronics Limited
  * Author: Stuart Menefy (stuart.menefy@st.com)
  *
  * May be copied or modified under the terms of the GNU General Public
  * License.  See linux/COPYING for more information.
  *
- * STMicroelectronics STx7105 Mboard support.
+ * Fortis HS8200 main board support.
  */
 
 #include <linux/init.h>
@@ -26,289 +29,324 @@
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
+#include <linux/bpa2.h>
 #include <linux/spi/spi_gpio.h>
 #include <asm/irq-ilc.h>
 #include <mach/common.h>
 #include "../mach-st/mb705-epld.h"
-
-
-
-#define MB680_PIO_PHY_RESET stm_gpio(5, 5)
-//#define MB680_PIO_PCI_SERR stm_gpio(6, 4)
-//#define MB680_PIO_PCI_RESET stm_gpio(15, 6)
-//#define MB680_PIO_MII_BUS_SWITCH stm_gpio(11, 2)
-
-
-
-static void __init mb680_setup(char** cmdline_p)
-{
-	printk(KERN_INFO "STMicroelectronics STx7105 Mboard initialisation\n");
+#include <linux/stm/pio.h>
+
+
+#define HS8200_PIO_PHY_RESET stm_gpio(5, 5)
+#define MB680_PIO_PCI_SERR stm_gpio(6, 4)
+#define MB680_PIO_PCI_RESET stm_gpio(15, 6)
+#define MB680_PIO_MII_BUS_SWITCH stm_gpio(11, 2)
+
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x49FFFFFF - linux   (159mb)
+0x4A000000 - 0x4B1FFFFF - bigphys ( 18mb)
+0x4B200000 - 0x4FFFFFFF - lmi_io  ( 78mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] =
+{
+	{
+		.name  = "LMI_IO",
+		.start = 0x47600000,
+		.size  = 0x07C00000, /* 124 Mb */
+		.flags = 0,
+		.aka   = LMI_IO_partalias
+	},
+	{
+		.name  = "bigphysarea",
+		.start = 0x4F200000,
+		.size  = 0x00E00000, /* 14 Mb */
+		.flags = 0,
+		.aka   = NULL
+	}
+};
+
+static void __init hs8200_setup(char **cmdline_p)
+{
+	printk(KERN_INFO "Fortis HS8200 main board initialisation\n");
 
 	stx7105_early_device_init();
 
-	stx7105_configure_asc(2, &(struct stx7105_asc_config) {
-			.routing.asc2 = stx7105_asc2_pio4,
-			.hw_flow_control = 1,
-			.is_console = 1, });
-	stx7105_configure_asc(3, &(struct stx7105_asc_config) {
-			.hw_flow_control = 1,
-			.is_console = 0, });
-}
-
-
-
-static struct platform_device mb680_leds = {
-	.name = "leds-gpio",
-	.id = 0,
-	.dev.platform_data = &(struct gpio_led_platform_data) {
-		.num_leds = 2,
-		.leds = (struct gpio_led[]) {
+	stx7105_configure_asc(2, &(struct stx7105_asc_config)
+	{
+		.routing.asc2 = stx7105_asc2_pio4,
+		.hw_flow_control = 0,
+		.is_console = 1,
+	});
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+
+}
+
+static int hs8200_phy_reset(void *bus)
+{
+	gpio_set_value(HS8200_PIO_PHY_RESET, 0);
+	udelay(100);
+	gpio_set_value(HS8200_PIO_PHY_RESET, 1);
+	return 0;
+}
+
+static struct stmmac_mdio_bus_data stmmac_mdio_bus =
+{
+	.bus_id = 0,
+	.phy_reset = hs8200_phy_reset,
+	.phy_mask = 0,
+};
+
+static struct mtd_partition hs8200_physmap_flash_partitions[] =
+{
+	{
+		.name   = "Boot_firmware",  // mtd0
+		.size   = 0x00060000,       // 384k
+		.offset = 0x00000000,
+	},
+	{
+		.name   = "kernel",         // mtd1
+		.size   = 0x00320000,       // 3,125M
+		.offset = 0x00060000,       // 384k (0.375M)
+	},
+	{
+		.name   = "ROOT_FS",        // mtd2
+		.size   = 0x00020000,       // 128k (dummy)
+		.offset = 0x00380000,       // 3.5M
+	},
+	{
+		.name   = "Device",         // mtd3
+		.size   = 0x00020000,       // 128k (dummy)
+		.offset = 0x003A0000,       // 3.625M
+	},
+	{
+		.name   = "APP",            // mtd4
+		.size   = 0x00020000,       // 128k (dummy)
+		.offset = 0x003C0000,       // 3.75M
+	},
+	{
+		.name   = "Real_ROOT",      // mtd5
+		.size   = 0x01D00000,       // 29M, 128k hole at 0x20FE0000 is used for force flash
+		.offset = 0x003E0000,       // 3.875M
+	},
+	{
+		.name   = "Config",         // mtd6
+		.size   = 0x00100000,       // 1M
+		.offset = 0x02100000,
+	},
+	{
+		.name   = "User",           // mtd7
+		.size   = 0x01E00000,       // 30M
+		.offset = 0x02200000,
+	}
+};
+
+static struct physmap_flash_data hs8200_physmap_flash_data =
+{
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(hs8200_physmap_flash_partitions),
+	.parts		= hs8200_physmap_flash_partitions
+};
+
+static struct platform_device hs8200_physmap_flash =
+{
+	.name          = "physmap-flash",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource[])
+	{
+		{
+			.start = 0x00000000,
+			.end   = 64 * 1024 * 1024 - 1,  // 64MB
+			.flags = IORESOURCE_MEM,
+		}
+	},
+	.dev =
+	{
+		.platform_data = &hs8200_physmap_flash_data,
+	},
+};
+
+static struct platform_device *hs8200_devices[] __initdata =
+{
+	&hs8200_physmap_flash,
+};
+
+static int __init hs8200_devices_init(void)
+{
+#if 1
+	/* Temporary: try and find the PIO's */
+	int i;
+	int j;
+#define SLEEP 300
+
+	for (i = 0; i < 17; i++)
+	{
+		for (j = 0; j < 8; j++)
+		{
+			if ((i == 4 && j == 2)   // console asc TxD OK
+			||  (i == 4 && j == 3)   // console asc RxD OK
+			||  (i == 4 && j == 4)   // console asc CTS OK
+			||  (i == 4 && j == 5)   // console asc RTS OK
+			||  (i == 5 && j == 0)   // FP asc OK
+			||  (i == 5 && j == 1)   // FP asc OK
+			||  (i == 2 && j == 2)   // i2c0 OK
+			||  (i == 2 && j == 3)   // i2c0 OK
+			||  (i == 3 && j == 4)   // i2c1 OK
+			||  (i == 3 && j == 5)   // i2c1 OK
+			||  (i == 3 && j == 6)   // i2c2 OK
+			||  (i == 3 && j == 7)   // i2c2 OK
+			||  (i == 4 && j == 4)   // rear USB overcurrent
+			||  (i == 4 && j == 5)   // rear USB power control
+			||  (i == 4 && j == 6)   // front USB overcurrent
+			||  (i == 4 && j == 7)   // front USB power control
+//			||  (i == 15 && j == 1)  // CiMAX reset
+//			||  (i == 15 && j == 4)  // CiMAX INT pin
+//			||  (i == 7 && j == 1)   // CI power control, top slot
+//			||  (i == 7 && j == 0)   // CI power control, top slot
+//			||  (i == 3 && j == 6)   // i2c3 OK
+//			||  (i == 3 && j == 7)   // i2c3 OK
+//			||  (i == 4 && j == 0)   // power control?
+			||  (i == 5 && j == 5)   // PHY_RESET 
+			||  (i == 17 && j == 4) 
+			||  (i == 17 && j == 4) 
+			||  (i == 17 && j == 4) 
+			||  (i == 0)             // skip card reader 0 interface
+			||  (i == 1)             // skip card reader 1 interface
+			||  (i == 7 && j == 4)   // MII interface 
+			||  (i == 7 && j == 5)   // MII interface 
+			||  (i == 7 && j == 6)   // MII interface 
+			||  (i == 7 && j == 7)   // MII interface
+			||  (i == 8)             // MII interface
+			||  (i == 9))            // MII interface
 			{
-				.name = "LD5",
-				.default_trigger = "heartbeat",
-				.gpio = stm_gpio(2, 4),
-			}, {
-				.name = "LD6",
-				.gpio = stm_gpio(2, 3),
-			},
-		},
-	},
-};
-
-/*
- * mb680 rev C added software control of the PHY reset, and buffers which
- * allow isolation of the MII pins so that their use as MODE pins is not
- * compromised by the PHY.
- */
-
-/*
- * When connected to the mb705, MII reset is controlled by an EPLD register
- * on the mb705.
- * When used standalone a PIO pin is used, and J47-C must be fitted.
- *
- * Timings:
- *    PHY         | Reset low | Post reset stabilisation
- *    ------------+-----------+-------------------------
- *    DB83865     |   150uS   |         20mS
- *    LAN8700     |   100uS   |         800nS
- */
-#ifdef CONFIG_SH_ST_MB705
-static void ll_phy_reset(void)
-{
-	mb705_reset(EPLD_EMI_RESET_SW0, 150);
-}
-#else
-static void ll_phy_reset(void)
-{
-	gpio_set_value(MB680_PIO_PHY_RESET, 0);
-	udelay(150);
-	gpio_set_value(MB680_PIO_PHY_RESET, 1);
-}
+				printk("Skip GPIO(%1d.%1d)\n", i, j);
+			}
+			else
+			{
+				stm_gpio_direction(stm_gpio(i, j), STM_GPIO_DIRECTION_OUT);
+				gpio_set_value(stm_gpio(i, j), 0);
+				printk("GPIO(%1d.%1d): ", i, j);
+				printk("off ");
+				mdelay(SLEEP);
+				gpio_set_value(stm_gpio(i, j), 1);
+				printk("on ");
+				mdelay(SLEEP);
+				gpio_set_value(stm_gpio(i, j), 0);
+				printk("off ");
+				mdelay(SLEEP);
+				gpio_set_value(stm_gpio(i, j), 1);
+				printk("on ");
+				mdelay(SLEEP);
+				stm_gpio_direction(stm_gpio(i, j), STM_GPIO_DIRECTION_IN);
+				printk("set to input\n");
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+			}
+		}
+	}
 #endif
-
-static int mb680_phy_reset(void *bus)
-{
-	gpio_set_value(MB680_PIO_MII_BUS_SWITCH, 1);
-	ll_phy_reset();
-	gpio_set_value(MB680_PIO_MII_BUS_SWITCH, 0);
-	mdelay(20);
-
-	return 0;
-}
-
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
-	.bus_id = 0,
-	.phy_reset = mb680_phy_reset,
-	.phy_mask = 0,
-};
-
-static struct platform_device *mb680_devices[] __initdata = {
-	&mb680_leds,
-};
-
-/* PCI configuration */
-
-#ifdef CONFIG_SH_ST_MB705
-static void mb705_epld_pci_reset(void)
-{
-	mb705_reset(EPLD_EMI_RESET_SW1, 1000);
-
-	/* PCI spec says one second */
-	mdelay(10);
-}
-#endif
-
-/*
- * J22-A must be removed, J22-B must be 2-3.
- */
-static struct stm_plat_pci_config mb680_pci_config = {
-	.pci_irq = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_DEFAULT,
-		[2] = PCI_PIN_DEFAULT,
-		[3] = PCI_PIN_UNUSED
-	},
-	.serr_irq = PCI_PIN_UNUSED, /* Modified in mb680_device_init() below */
-	.idsel_lo = 30,
-	.idsel_hi = 30,
-	.req_gnt = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
-	},
-	.pci_clk = 33333333,
-	/* When connected to the mb705, PCI reset is controlled by an EPLD
-	 * register on the mb705. When used standalone a PIO pin is used,
-	 * and J47-D, J9-G must be fitted. */
-#ifdef CONFIG_SH_ST_MB705
-	.pci_reset = mb705_epld_pci_reset,
-#else
-	.pci_reset_gpio = MB680_PIO_PCI_RESET,
-#endif
-};
-
-int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
-{
-       /* We can use the standard function on this board */
-       return stx7105_pcibios_map_platform_irq(&mb680_pci_config, pin);
-}
-
-void __init mbxxx_configure_audio_pins(int *pcm_reader, int *pcm_player)
-{
-	*pcm_reader = -1;
-	*pcm_player = 0;
-	stx7105_configure_audio(&(struct stx7105_audio_config) {
-			.pcm_player_0_output =
-					stx7105_pcm_player_0_output_6_channels,
-			.spdif_player_output_enabled = 1,
-			.pcm_reader_input_enabled =
-					cpu_data->type == CPU_STX7105, });
-}
-
-#ifdef CONFIG_SH_ST_MB705
-void __init mbxxx_configure_nand_flash(struct stm_nand_config *config)
-{
-	stx7105_configure_nand(config);
-}
-
-/* GPIO based SPI */
-static struct platform_device mb680_serial_flash_bus = {
-	.name           = "spi_gpio",
-	.id             = 8,
-	.num_resources  = 0,
-	.dev.platform_data = &(struct spi_gpio_platform_data) {
-		.sck = stm_gpio(15, 0),
-		.mosi = stm_gpio(15, 1),
-		.miso = stm_gpio(15, 3),
-		.num_chipselect = 1,
-	},
-};
-
-void __init mbxxx_configure_serial_flash(struct spi_board_info *serial_flash)
-{
-	/* Specify CSn and SPI bus */
-	serial_flash->bus_num = 8;
-	serial_flash->controller_data = (void *)stm_gpio(15, 2);
-
-	/* Register SPI bus and flash devices */
-	platform_device_register(&mb680_serial_flash_bus);
-	spi_register_board_info(serial_flash, 1);
-}
-#endif
-
-static int __init mb680_devices_init(void)
-{
-	/* Setup the PCI_SERR# PIO
-	 * J20-A - open, J27-E - closed */
-	if (gpio_request(MB680_PIO_PCI_SERR, "PCI_SERR#") == 0) {
-		gpio_direction_input(MB680_PIO_PCI_SERR);
-		mb680_pci_config.serr_irq = gpio_to_irq(MB680_PIO_PCI_SERR);
-		set_irq_type(mb680_pci_config.serr_irq, IRQ_TYPE_LEVEL_LOW);
-	} else {
-		printk(KERN_WARNING "mb680: Failed to claim PCI_SERR PIO!\n");
-	}
-	stx7105_configure_pci(&mb680_pci_config);
-
-	stx7105_configure_sata(0);
-
-	/* Valid only for mb680 rev. A & rev. B (they had two SATA lines) */
-	stx7105_configure_sata(1);
-
-	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
-			.out0 = stx7105_pwm_out0_pio13_0,
-			.out1 = stx7105_pwm_out1_disabled, });
-
-	/* NIM CD I2C bus*/
-	stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
-			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
-			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
-	/* NIM AB/STRecord I2C bus*/
-	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
-			.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
-			.routing.ssc2.mtsr = stx7105_ssc2_mtsr_pio3_5, });
-	/* HDMI I2C bus */
-	stx7105_configure_ssc_i2c(3, &(struct stx7105_ssc_config) {
-			.routing.ssc3.sclk = stx7105_ssc3_sclk_pio3_6,
-			.routing.ssc3.mtsr = stx7105_ssc3_mtsr_pio3_7, });
-
-	/*
-	 * Note that USB port configuration depends on jumper
-	 * settings:
-	 *
-	 *	  PORT 0	       		PORT 1
-	 *	+-----------------------------------------------------------
-	 * norm	|  4[4]	J5A:2-3			 4[6]	J10A:2-3
-	 * alt	| 12[5]	J5A:1-2  J6F:open	14[6]	J10A:1-2  J11G:open
-	 * norm	|  4[5]	J5B:2-3			 4[7]	J10B:2-3
-	 * alt	| 12[6]	J5B:1-2  J6G:open	14[7]	J10B:1-2  J11H:open
-	 */
-	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
-			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
-			.pwr_enabled = 1,
-			.routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
-			.routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
-	stx7105_configure_usb(1, &(struct stx7105_usb_config) {
-			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
-			.pwr_enabled = 1,
-			.routing.usb1.ovrcur = stx7105_usb1_ovrcur_pio4_6,
-			.routing.usb1.pwr = stx7105_usb1_pwr_pio4_7, });
-
-	gpio_request(MB680_PIO_PHY_RESET, "notPioResetMII");
-	gpio_direction_output(MB680_PIO_PHY_RESET, 1);
-	gpio_request(MB680_PIO_MII_BUS_SWITCH, "MIIBusSwitchnotOE");
-	gpio_direction_output(MB680_PIO_MII_BUS_SWITCH, 1);
-
-	stx7105_configure_ethernet(0, &(struct stx7105_ethernet_config) {
-			.mode = stx7105_ethernet_mode_mii,
-			.ext_clk = 1,
-			.phy_bus = 0,
-			.phy_addr = -1,
-			.mdio_bus_data = &stmmac_mdio_bus,
-		});
-
-	/*
-	 * Check jumpers before using IR:
-	 * On the mb705:
-	 *	J25A : 1-2
-	 *	J25B : 1-2 (UHF), 2-3 (IR)
-	 * On the mb680:
-	 *	J15A : fitted
-	 */
-	stx7105_configure_lirc(&(struct stx7105_lirc_config) {
-#ifdef CONFIG_LIRC_STM_UHF
-			.rx_mode = stx7105_lirc_rx_mode_uhf,
-#else
-			.rx_mode = stx7105_lirc_rx_mode_ir,
-#endif
-			.tx_enabled = 1,
-			.tx_od_enabled = 1, });
-
-	return platform_add_devices(mb680_devices, ARRAY_SIZE(mb680_devices));
-}
-arch_initcall(mb680_devices_init);
-
-static void __iomem *mb680_ioport_map(unsigned long port, unsigned int size)
+ 	stx7105_configure_sata(0);
+
+	// I2C bus 0: frontend 0
+	//      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
+	// 00:          -- -- -- -- -- -- -- -- -- 0c -- -- --
+	// 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 70: -- -- -- -- -- -- -- --
+	stx7105_configure_ssc_i2c(0, &(struct stx7105_ssc_config)
+	{
+		.routing.ssc1.sclk = stx7105_ssc0_sclk_pio2_2,
+		.routing.ssc1.mtsr = stx7105_ssc0_mtsr_pio2_3,
+	});
+	// I2C bus 1: frontend 1
+	//      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
+	// 00:          -- -- -- -- -- -- -- -- -- 0c -- -- --
+	// 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 70: -- -- -- -- -- -- -- --
+	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config)
+	{
+		.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
+		.routing.ssc2.mtsr = stx7105_ssc2_mtsr_pio3_5,
+	});
+	// I2C bus 2: frontend all the rest...
+	//      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
+	// 00:          -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 30: UU -- -- -- -- -- -- -- -- -- 3a -- -- 3d -- --
+	// 40: 40 -- -- -- -- -- -- -- -- -- -- UU -- -- -- --
+	// 50: UU 51 52 53 54 55 56 57 -- -- -- -- -- -- -- --
+	// 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
+	// 70: -- -- -- -- -- -- -- --
+	//
+	// 30:
+	// 3a
+	// 3d
+	// 40 CI controller
+	// 4b
+	// 50-57: EEPROM
+	stx7105_configure_ssc_i2c(3, &(struct stx7105_ssc_config)
+	{
+		.routing.ssc3.sclk = stx7105_ssc3_sclk_pio3_6,
+		.routing.ssc3.mtsr = stx7105_ssc3_mtsr_pio3_7,
+	});
+
+	// USB
+	stx7105_configure_usb(0, &(struct stx7105_usb_config)
+	{
+		.ovrcur_mode = stx7105_usb_ovrcur_disabled,
+		.pwr_enabled = 1,
+		.routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
+		.routing.usb0.pwr = stx7105_usb0_pwr_pio4_5,
+	});
+	stx7105_configure_usb(1, &(struct stx7105_usb_config)
+	{
+		.ovrcur_mode = stx7105_usb_ovrcur_active_low,
+		.pwr_enabled = 1,
+		.routing.usb1.ovrcur = stx7105_usb1_ovrcur_pio4_6,
+		.routing.usb1.pwr = stx7105_usb1_pwr_pio4_7,
+	});
+
+	// Network
+	gpio_request(HS8200_PIO_PHY_RESET, "notPioResetMII");
+	gpio_direction_output(HS8200_PIO_PHY_RESET, 1);
+
+	stx7105_configure_ethernet(0, &(struct stx7105_ethernet_config)
+	{
+		.mode = stx7105_ethernet_mode_mii,
+		.ext_clk = 1,
+		.phy_bus = 0,
+		.phy_addr = -1,
+		.mdio_bus_data = &stmmac_mdio_bus,
+	});
+
+	// enable optical out
+	stpio_request_pin(10, 6, "opt_out", STPIO_ALT_OUT);
+
+	return platform_add_devices(hs8200_devices, ARRAY_SIZE(hs8200_devices));
+}
+arch_initcall(hs8200_devices_init);
+
+static void __iomem *hs8200_ioport_map(unsigned long port, unsigned int size)
 {
 	/*
 	 * If we have PCI then this should never be called because we
@@ -320,7 +358,7 @@
 	return (void __iomem *)CCN_PVR;
 }
 
-static void __init mb680_init_irq(void)
+static void __init hs8200_init_irq(void)
 {
 #ifndef CONFIG_SH_ST_MB705
 	/* Configure STEM interrupts as active low. */
@@ -330,10 +368,11 @@
 }
 
 struct sh_machine_vector mv_mb680 __initmv = {
-	.mv_name		= "STx7105 Mboard",
-	.mv_setup		= mb680_setup,
-	.mv_nr_irqs		= NR_IRQS,
-	.mv_init_irq		= mb680_init_irq,
-	.mv_ioport_map		= mb680_ioport_map,
+	.mv_name       = "Fortis HS8200",
+	.mv_setup      = hs8200_setup,
+	.mv_nr_irqs    = NR_IRQS,
+	.mv_init_irq   = hs8200_init_irq,
+	.mv_ioport_map = hs8200_ioport_map,
 	STM_PCI_IO_MACHINE_VEC
 };
+//vim:ts=4
