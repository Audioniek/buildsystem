--- a/arch/sh/kernel/setup.c.orig
+++ a/arch/sh/kernel/setup.c
@@ -420,6 +420,34 @@
 #endif
 #endif
 
+	{
+		int command_line_len = strlen(command_line);
+		char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock0 rw rootfstype=jffs2";
+		char new_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock2 rw rootfstype=jffs2 init=/bin/devinit mem=128m coprocessor_mem=4m@0x10000000,4m@0x10400000 nwhwconf=device:eth0,hwaddr:";
+		char mac[] = "12:34:56:78:9A:BC";
+		int org_command_line_len = strlen(org_command_line);
+		int i;
+
+		for (i = 0; i < (command_line_len - 7); i++)
+		{
+			if (!strncmp(command_line + i, "ethaddr", 7))
+			{
+				strlcpy(mac, command_line + i + 8, sizeof(mac));
+				break;
+			}
+			if (!strncmp(command_line + i, "hwaddr", 6))
+			{
+				strlcpy(mac, command_line + i + 7, sizeof(mac));
+				break;
+			}
+		}
+		if (command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+		{
+			strlcpy(command_line, new_command_line, sizeof(new_command_line));
+			strlcat(command_line, mac, sizeof(mac));
+		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
@@ -587,6 +615,7 @@
 	seq_printf(m, "cpu family\t: %s\n", init_utsname()->machine);
 	seq_printf(m, "cpu variant\t: %s\n", get_cpu_variant(c));
 	seq_printf(m, "cpu type\t: %s\n", get_cpu_subtype(c));
+	seq_printf(m, "cpu MHz\t\t: 266\n");
 	if (c->cut_major == -1)
 		seq_printf(m, "cut\t\t: unknown\n");
 	else if (c->cut_minor == -1)
--- a/arch/sh/boards/mach-mb442/setup.c.org
+++ b/arch/sh/boards/mach-mb442/setup.c
@@ -18,100 +18,182 @@
 #include <linux/delay.h>
 #include <linux/spi/spi.h>
 #include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/stm/nand.h>
+#include <linux/stm/nand_devices.h>
+#include <linux/mtd/partitions.h> 
 #include <linux/mtd/physmap.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
-
-
-
-#define MB442_PIO_STE100P_RESET stm_gpio(2, 4)
-#define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
-#define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
-
-
+#include <linux/bpa2.h>
+#include <linux/stm/emi.h>
+#include <linux/stm/gpio.h> 
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", "v4l2-coded-video-buffers", NULL };
+
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", NULL };
+
+/*
+ 0x10000000 - 0x103FFFFF - cocpu 1 ram ( 4mb)
+ 0x10400000 - 0x107FFFFF - cocpu 2 ram ( 4mb)
+ 0x10800000 - 0x13FFFFFF - lmi_vid     (56mb)
+ 0x14000000 - 0x15BFFFFF - lmi_sys     (28mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+      {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+            },
+            {
+                .name  = "LMI_SYS",
+                .start = 0,
+                .size  = 0x01C00000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+            }
+        };
 
 void __init mb442_setup(char** cmdline_p)
 {
-	printk("STMicroelectronics STb7100 Reference board initialisation\n");
+	printk("ADB ITI-5800S(X) board initialisation\n");
 
 	stx7100_early_device_init();
 
-	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
-			.is_console = 1, });
-	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
-			.is_console = 0, });
+	stx7100_configure_asc(2, &(struct stx7100_asc_config)
+	{
+		.hw_flow_control = 0,
+		.is_console = 1,
+	});
+	stx7100_configure_asc(3, &(struct stx7100_asc_config)
+	{
+		.hw_flow_control = 0,
+		.is_console = 0,
+	});
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
-static struct resource mb442_smc91x_resources[] = {
-	[0] = {
-		.start	= 0x02000300,
-		.end	= 0x02000300 + 0xff,
+/* Network */
+static struct resource iti5800_smc91x_resources[] =
+{
+	[0] =
+	{
+		.start	= 0x00c00000,
+		.end	= 0x00c3ffff,
 		.flags	= IORESOURCE_MEM,
 	},
-	[1] = {
-		.start	= IRL0_IRQ,
-		.end	= IRL0_IRQ,
+	[1] =
+	{
+		.start	= IRL1_IRQ,
+		.end	= IRL1_IRQ,
 		.flags	= IORESOURCE_IRQ,
 	},
 };
 
-static struct platform_device mb442_smc91x_device = {
+static struct platform_device iti5800_smc91x_device =
+{
 	.name		= "smc91x",
 	.id		= 0,
-	.num_resources	= ARRAY_SIZE(mb442_smc91x_resources),
-	.resource	= mb442_smc91x_resources,
-};
-
-static void mb442_set_vpp(struct map_info *info, int enable)
-{
-	gpio_set_value(MB442_PIO_FLASH_VPP, enable);
-}
-
-static struct platform_device mb442_physmap_flash = {
+	.num_resources	= ARRAY_SIZE(iti5800_smc91x_resources),
+	.resource	= iti5800_smc91x_resources,
+};
+
+/* NOR Flash */
+static struct mtd_partition nor_parts[] =
+{
+	{
+		.name = "uboot",                  // mtd0: U-boot from A0200000 to A022FFFF
+		.size = 0x00030000,               // 192 kbyte (note hole of 64 kbyte until environment)
+		.offset = 0x00000000,
+	},
+	{
+		.name = "uboot env",              // mtd 1
+		.size = 0x00010000,               //  64 kbyte
+		.offset = 0x00040000,             // 256 kbyte
+	},
+//	{
+//		.name = "nor_reserve",            // mtd 2
+//		.size   = MTDPART_SIZ_FULL,	  // 4 Mbyte - 320 kbyte = 3,6875 Mbyte
+//		.offset = 0x00050000,             // 320 kbyte
+//	}
+};
+
+static struct platform_device iti5800_nor_device =
+{
 	.name		= "physmap-flash",
 	.id		= -1,
 	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
-	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.set_vpp	= mb442_set_vpp,
-	},
-};
-
-
-static int mb442_phy_reset(void* bus)
-{
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-
-	return 1;
-}
-
-#define STMMAC_PHY_ADDR 14
-static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
-	[STMMAC_PHY_ADDR] = IRL3_IRQ,
-};
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
-	.bus_id = 0,
-	.phy_reset = mb442_phy_reset,
-	.phy_mask = 1,
-	.irqs = stmmac_phy_irqs,
-};
-
-static struct platform_device *mb442_devices[] __initdata = {
-	&mb442_smc91x_device,
-	&mb442_physmap_flash,
-};
-
-static int __init mb442_device_init(void)
+	.resource       = (struct resource[])
+	{
+		STM_PLAT_RESOURCE_MEM(0, 4 * 1024 * 1024),
+	},
+	.dev.platform_data      = &(struct physmap_flash_data)
+	{
+		.width		= 2, 
+		.nr_parts	= ARRAY_SIZE(nor_parts),
+		.parts		= nor_parts, 
+	},
+};
+
+/* NAND Flash */
+static struct mtd_partition iti5800_nand_parts[] =
+{
+	{
+		.name   = "rootfs",             // mtd 2 or 3
+		.offset = 0,                    //
+		.size   = 0x03C00000,           // 60 Mbyte
+	},
+	{
+		.name   = "kernel",     	// mtd 3 or 4
+		.offset = MTDPART_OFS_APPEND,   // 60 Mbyte
+		.size   = MTDPART_SIZ_FULL,	// 4 Mbyte
+	},
+};
+
+struct stm_nand_bank_data iti5800_nand_bank_data =
+{
+	.csn            = 1,
+	.nr_partitions  = ARRAY_SIZE(iti5800_nand_parts),
+	.partitions     = iti5800_nand_parts,
+	.options        = NAND_NO_AUTOINCR,
+	.timing_data    = &(struct stm_nand_timing_data)
+	{  // TODO: check values (STM NAND512 chip)
+		.sig_setup      = 40,	/* times in ns */
+		.sig_hold       = 40,
+		.CE_deassert    = 0,
+		.WE_to_RBn      = 100,
+		.wr_on          = 0,
+		.wr_off         = 10,
+		.rd_on          = 0,
+		.rd_off         = 10,
+		.chip_delay     = 25,	/* in us */
+	},
+	.emi_withinbankoffset   = 0,
+};
+
+static struct platform_device iti5800_nand_device =
+{
+	.name                   = "stm-nand-emi",
+	.dev.platform_data      = &(struct stm_plat_nand_emi_data)
+	{
+		.nr_banks       = 1,
+		.banks          = &iti5800_nand_bank_data,
+		.emi_rbn_gpio   = stm_gpio(4, 5), 
+	},
+};
+
+static struct platform_device *iti5800_devices[] __initdata =
+{
+	&iti5800_smc91x_device,
+	&iti5800_nor_device,
+	&iti5800_nand_device,
+};
+
+static int __init iti5800_device_init(void)
 {
 	stx7100_configure_sata();
 
@@ -120,8 +202,7 @@
 			.out1_enabled = 1, });
 
 	stx7100_configure_ssc_i2c(0, NULL);
-	stx7100_configure_ssc_spi(1, NULL);
-	stx7100_configure_ssc_i2c(2, NULL);
+	stx7100_configure_ssc_i2c(1, NULL);
 
 	stx7100_configure_usb();
 
@@ -130,34 +211,7 @@
 			.tx_enabled = 0,
 			.tx_od_enabled = 0, });
 
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
-	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
-
-	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
-	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
-
-	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
-			.mode = stx7100_ethernet_mode_mii,
-			.ext_clk = 0,
-			.phy_bus = 0,
-			.phy_addr = STMMAC_PHY_ADDR,
-			.mdio_bus_data = &stmmac_mdio_bus,
-		});
-
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
-
-	return platform_add_devices(mb442_devices,
-			ARRAY_SIZE(mb442_devices));
+	return platform_add_devices(iti5800_devices,
+			ARRAY_SIZE(iti5800_devices));
 }
-device_initcall(mb442_device_init);
+device_initcall(iti5800_device_init);
--- linux-sh4/drivers/ata/sata_stm.c.org
+++ linux-sh4/drivers/ata/sata_stm.c
@@ -871,6 +871,8 @@
 	} else if (readl(mmio + DMAC_RAWERR) & 1) {
 		ata_port_printk(ap, KERN_ERR, "DMA error asserted\n");
 	}
+	
+	else handled = 0;
 
 	return handled;
 
@@ -951,20 +953,20 @@
 	struct ata_host *host = dev_instance;
 	unsigned int handled = 0;
 	unsigned int i;
-	struct stm_host_priv *hpriv = host->private_data;
 
 DPRINTK("ENTER\n");
 
 	spin_lock(&host->lock);
 
-	for (i = 0; i < host->n_ports; i++) {
-		if (hpriv->shared_dma_host_irq)
-			handled += stm_sata_dma_irq(host->ports[i]);
-		handled += stm_sata_host_irq(host->ports[i]);
+	for (i = 0; i < host->n_ports; i++) 
+	{
+		handled += stm_sata_dma_irq(host->ports[i]);
+		if (!(handled)) handled += stm_sata_host_irq(host->ports[i]);
+		else handled = 0;
 	}
 
 	spin_unlock(&host->lock);
-
+	
 	return IRQ_RETVAL(handled);
 }
 
@@ -1230,6 +1232,9 @@
 		sata_private_info->device_config);
 	if (!hpriv->device_state)
 		return -EBUSY;
+
+	if (!hpriv->device_state)
+		return -EBUSY; 
 
 	mem_res = platform_get_resource(pdev,IORESOURCE_MEM,0);
 	phys_base = mem_res->start;
--- linux-sh4/drivers/mtd/nand/Kconfig.org
+++ linux-sh4/drivers/mtd/nand/Kconfig
@@ -499,4 +499,5 @@
	depends on MTD_NAND
+	depends on (CPU_SUBTYPE_STX7100)
	help
	  Enables the STMicroelectronics NAND driver for platforms in which the
	  device is connected via an EMI bank.
--- linux-sh4/drivers/mtd/nand/stm_nand_emi.c.org
+++ linux-sh4/drivers/mtd/nand/stm_nand_emi.c
@@ -37,6 +37,7 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/nand.h>
 #include <asm/dma.h>
+#include <linux/stm/pio.h>
 
 #include "stm_nand_bbt.h"
 
@@ -45,7 +46,7 @@
 #endif
 
 #define NAME	"stm-nand-emi"
-
+struct stpio_pin *nand_ce_pin = NULL;
 /*
  * Private data for stm_emi_nand driver.  Concurrency and device locking
  * handled by MTD layers.
@@ -463,12 +464,24 @@
 
 	if (ctrl & NAND_CTRL_CHANGE) {
 		if (ctrl & NAND_CLE) {
-			this->IO_ADDR_W = data->io_cmd;
-		} else if (ctrl & NAND_ALE) {
-			this->IO_ADDR_W = data->io_addr;
-		} else {
-			this->IO_ADDR_W = data->io_base;
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(1 << 17));
 		}
+		else {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W & ~(unsigned int)(1 << 17));
+		}
+
+		if (ctrl & NAND_ALE) {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(1 << 16));
+		}
+		else {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W & ~(unsigned int)(1 << 16));
+		}
+	if (ctrl & NAND_NCE) {
+		    stpio_set_pin(nand_ce_pin, 0); 
+			}
+			else {
+			stpio_set_pin(nand_ce_pin, 1); 
+		}	
 	}
 
 	if (cmd != NAND_CMD_NONE)
@@ -730,10 +743,10 @@
 		goto out4;
 	}
 
-	data->io_addr = ioremap_nocache(data->emi_base | (1 << 18), 1);
+	data->io_addr = ioremap_nocache(data->emi_base | (1 << 16), 1);
 	if (!data->io_addr) {
 		printk(KERN_ERR NAME ": ioremap failed for io_addr 0x%08x\n",
-		       data->emi_base | (1 << 18));
+		       data->emi_base | (1 << 16));
 		res = -ENOMEM;
 		goto out5;
 	}
@@ -746,8 +759,8 @@
 	/* Assign more sensible name (default is string from nand_ids.c!) */
 	data->mtd.name = dev_name(&pdev->dev);
 
-	data->chip.IO_ADDR_R = data->io_base;
-	data->chip.IO_ADDR_W = data->io_base;
+	data->chip.IO_ADDR_R = 0xA0400000;
+	data->chip.IO_ADDR_W = 0xA0800000;
 	data->rbn_gpio = -1;
 	data->chip.chip_delay = 50;
 	data->chip.cmd_ctrl = nand_cmd_ctrl_emi;
@@ -913,7 +926,7 @@
 			GFP_KERNEL);
 	if (!group)
 		return -ENOMEM;
-
+	nand_ce_pin = stpio_request_set_pin(3, 6, "nand_sel", STPIO_OUT, 0);
 	rbn_gpio = pdata->emi_rbn_gpio;
 	if (gpio_is_valid(rbn_gpio)) {
 		err = gpio_request(rbn_gpio, "nand_RBn");
--- linux-sh4/drivers/net/smc91x.c.org
+++ linux-sh4/drivers/net/smc91x.c
@@ -234,7 +234,6 @@
 	}								\
 } while (0)
 
-
 /*
  * this does a soft reset on the device
  */
@@ -269,6 +268,10 @@
 	SMC_SELECT_BANK(lp, 0);
 	SMC_SET_RCR(lp, RCR_SOFTRST);
 
+    	msleep(100); // d-mon
+    	SMC_SET_RCR(lp, RCR_CLEAR);
+    	msleep(60);
+
 	/*
 	 * Setup the Configuration Register
 	 * This is necessary because the CONFIG_REG is not affected
@@ -309,6 +312,8 @@
 	SMC_SET_RCR(lp, RCR_CLEAR);
 	SMC_SET_TCR(lp, TCR_CLEAR);
 
+    	udelay(5); // d-mon
+
 	SMC_SELECT_BANK(lp, 1);
 	ctl = SMC_GET_CTL(lp) | CTL_LE_ENABLE;
 
@@ -325,6 +330,8 @@
 
 	/* Reset the MMU */
 	SMC_SELECT_BANK(lp, 2);
+	udelay(5); // d-mon
+
 	SMC_SET_MMU_CMD(lp, MC_RESET);
 	SMC_WAIT_MMU_BUSY(lp);
 }
@@ -349,7 +356,9 @@
 	SMC_SET_MAC_ADDR(lp, dev->dev_addr);
 
 	/* now, enable interrupts */
-	mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	//mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	mask = IM_ERCV_INT|IM_ALLOC_INT|IM_RCV_INT | IM_MDINT; // d-mon
+
 	if (lp->version >= (CHIP_91100 << 4))
 		mask |= IM_MDINT;
 	SMC_SELECT_BANK(lp, 2);
@@ -1117,10 +1126,14 @@
 	 * Enable PHY Interrupts (for register 18)
 	 * Interrupts listed here are disabled
 	 */
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+
 	smc_phy_write(dev, phyaddr, PHY_MASK_REG,
 		PHY_INT_LOSSSYNC | PHY_INT_CWRD | PHY_INT_SSD |
 		PHY_INT_ESD | PHY_INT_RPOL | PHY_INT_JAB |
 		PHY_INT_SPDDET | PHY_INT_DPLXDET);
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
 
 	/* Configure the Receive/Phy Control register */
 	SMC_SELECT_BANK(lp, 0);
@@ -2354,7 +2367,11 @@
 		ret = -ENOMEM;
 		goto out_release_attrib;
 	}
-
+	
+	
+	platform_set_drvdata(pdev, ndev);
+	//ret = smc_probe(ndev, addr);
+	
 #ifdef CONFIG_ARCH_PXA
 	{
 		struct smc_local *lp = netdev_priv(ndev);
--- linux-sh4/drivers/net/smc91x.h.org
+++ linux-sh4/drivers/net/smc91x.h
@@ -250,16 +250,19 @@
  * to do a SMC_outl, which on a 16 bit bus translates into two 16 bit writes.
  * This bypasses the special logic which would prevent this also updating
  * this interrupt mask register. */
-#define SMC_CAN_USE_8BIT	1
+#define SMC_CAN_USE_8BIT	0
 #define SMC_CAN_USE_16BIT	1
 #define SMC_CAN_USE_32BIT	0
 #define SMC_CAN_USE_32BIT_DATA	1
-#define SMC_IO_SHIFT		0
+#define SMC_IO_SHIFT		14
+    
+    #undef  SMC_USE_PXA_DMA
+     
 #else
 #error Unknown board
 #endif
 
-#define SMC_NOWAIT		0
+#define SMC_NOWAIT		1
 #define SMC_IRQ_FLAGS		0
 
 #ifdef SMC_STEM_BS_MASK
--- linux-sh4/drivers/stm/stx7100_comms.c.org
+++ linux-sh4/drivers/stm/stx7100_comms.c
@@ -226,12 +226,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(2, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(2, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC0_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 1, 1, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+		//	/* DVO_OUT_ON = 0 (SSC not DVO) */
+		//	STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[1] = {
@@ -345,7 +345,7 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
--- linux-sh4/include/linux/libata.h.org
+++ linux-sh4/include/linux/libata.h
@@ -52,6 +52,7 @@
  * compile-time options: to be removed as soon as all the drivers are
  * converted to the new debugging mechanism
  */
+//#define ATA_DEBUG
 #undef ATA_DEBUG		/* debugging output */
 #undef ATA_VERBOSE_DEBUG	/* yet more debugging output */
 #undef ATA_IRQ_TRAP		/* define to ack screaming irqs */
@@ -938,6 +939,18 @@
 #undef writew
 #define writew(v_,a_)	sata_writew(ap, v_, a_)
 
+/* overwrite the original definition from io.h */
+#undef __raw_readb
+#define __raw_readb(a_)		readb(a_)
+#undef __raw_writeb
+#define __raw_writeb(v_,a_)	writeb(v_,a_)
+#undef __raw_readw
+#define __raw_readw(a_)		readw(a_)
+#undef __raw_writew
+#define __raw_writew(v_,a_)	writew(v_,a_)
+
+
+
 struct ata_port_info {
 	unsigned long		flags;
 	unsigned long		link_flags;
--- linux-sh4/drivers/stm/stx7100_hispeed.c.org
+++ linux-sh4/drivers/stm/stx7100_hispeed.c
@@ -192,6 +192,12 @@
 	 */
 	stx7100_usb_pwr_gpio = stm_pad_gpio_request_output(state, "PWR", 1);
 	BUG_ON(stx7100_usb_pwr_gpio == STM_GPIO_INVALID);
+
+       //reset usb on boot - some DVB-T dongles (as102) need it to work properly.
+       gpio_set_value(stx7100_usb_pwr_gpio, 0);
+       mdelay(2000);
+       gpio_set_value(stx7100_usb_pwr_gpio, 1);
+       mdelay(600);
 
 	return 0;
 }
