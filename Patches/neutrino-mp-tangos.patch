--- neutrino-mp-tangos.org/acinclude.m4
+++ neutrino-mp-tangos/acinclude.m4
@@ -476,7 +476,7 @@
 
 AC_ARG_WITH(boxmodel,
 	AS_HELP_STRING([--with-boxmodel], [valid for coolstream: hd1, hd2])
-AS_HELP_STRING([], [valid for duckbox: ufs910, ufs912, ufs913, ufs922, atevio7500, fortis_hdbox, octagon1008, hs7110, hs7810a, hs7119, hs7819, dp7000, cuberevo, cuberevo_mini, cuberevo_mini2, cuberevo_250hd, cuberevo_2000hd, cuberevo_3000hd, ipbox9900, ipbox99, ipbox55, arivalink200, tf7700, hl101])
+AS_HELP_STRING([], [valid for duckbox: ufs910, ufs912, ufs913, ufs922, atevio7500, fortis_hdbox, octagon1008, hs7110, hs7420, hs7810a, hs7119, hs7429, hs7819, cuberevo, cuberevo_mini, cuberevo_mini2, cuberevo_250hd, cuberevo_2000hd, cuberevo_3000hd, ipbox9900, ipbox99, ipbox55, arivalink200, tf7700, hl101])
 AS_HELP_STRING([], [valid for spark: spark, spark7162])
 AS_HELP_STRING([], [valid for armbox: hd51, hd60, vusolo4k, bre2ze4k])
 AS_HELP_STRING([], [valid for generic: raspi]),
@@ -557,8 +557,10 @@
 AM_CONDITIONAL(BOXMODEL_FORTIS_HDBOX, test "$BOXMODEL" = "fortis_hdbox")
 AM_CONDITIONAL(BOXMODEL_OCTAGON1008, test "$BOXMODEL" = "octagon1008")
 AM_CONDITIONAL(BOXMODEL_HS7110, test "$BOXMODEL" = "hs7110")
+AM_CONDITIONAL(BOXMODEL_HS7420,test "$BOXMODEL" = "hs7420")
 AM_CONDITIONAL(BOXMODEL_HS7810A, test "$BOXMODEL" = "hs7810a")
 AM_CONDITIONAL(BOXMODEL_HS7119, test "$BOXMODEL" = "hs7119")
+AM_CONDITIONAL(BOXMODEL_HS7429,test "$BOXMODEL" = "hs7429")
 AM_CONDITIONAL(BOXMODEL_HS7819, test "$BOXMODEL" = "hs7819")
 AM_CONDITIONAL(BOXMODEL_DP7000, test "$BOXMODEL" = "dp7000")
 
@@ -626,10 +628,14 @@
 	AC_DEFINE(BOXMODEL_OCTAGON1008, 1, [octagon1008])
 elif test "$BOXMODEL" = "hs7110"; then
 	AC_DEFINE(BOXMODEL_HS7110, 1, [hs7110])
+elif test "$BOXMODEL" = "hs7420"; then
+	AC_DEFINE(BOXMODEL_HS7420, 1, [hs7420])
 elif test "$BOXMODEL" = "hs7810a"; then
 	AC_DEFINE(BOXMODEL_HS7810A, 1, [hs7810a])
 elif test "$BOXMODEL" = "hs7119"; then
 	AC_DEFINE(BOXMODEL_HS7119, 1, [hs7119])
+elif test "$BOXMODEL" = "hs7429"; then
+	AC_DEFINE(BOXMODEL_HS7429, 1, [hs7429])
 elif test "$BOXMODEL" = "hs7819"; then
 	AC_DEFINE(BOXMODEL_HS7819, 1, [hs7819])
 elif test "$BOXMODEL" = "dp7000"; then
#--- neutrino-mp-tangos.org/src/global.h
#+++ neutrino-mp-tangos/src/global.h
#@@ -57,7 +57,7 @@
# #define LOGODIR		ICONSDIR "/logo"
# #define LOGODIR_VAR	ICONSDIR_VAR "/logo"
# 
#-#define FLAGDIR		CONFIGDIR
#+//#define FLAGDIR		CONFIGDIR
# 
# NEUTRINO_CPP  SNeutrinoSettings	g_settings;
# NEUTRINO_CPP  SglobalInfo	g_info;
#--- neutrino-mp-tangos.org/lib/hardware/ca.h
#+++ neutrino-mp-tangos/lib/hardware/ca.h
#@@ -1,7 +1,7 @@
# #if HAVE_COOL_HARDWARE
# #include <ca_cs.h>
# #elif USE_STB_HAL
#-#include <ca_hal.h>
#+#include <ca_cs.h>
# #else
# #error neither HAVE_COOL_HARDWARE nor USE_STB_HAL defined.
# #error do you need to include config.h?
#--- neutrino-mp-tangos.org/lib/hardware/video.h
#+++ neutrino-mp-tangos/lib/hardware/video.h
#@@ -2,7 +2,7 @@
# #include <cs_api.h>
# #include <video_cs.h>
# #elif USE_STB_HAL
#-#include <init.h>
#+#include <init_td.h>
# #include <video_hal.h>
# #else
# #error neither HAVE_COOL_HARDWARE nor USE_STB_HAL defined.
--- neutrino-mp-tangos.org/src/neutrino.cpp
+++ neutrino-mp-tangos/src/neutrino.cpp
@@ -4724,6 +4724,9 @@
 
 		CVFD::getInstance()->Clear();
 		CVFD::getInstance()->setMode(CVFD::MODE_STANDBY);
+#if defined (FORTIS_HDBOX) || defined (TF7700)
+		CVFD::getInstance()->setlcdparameter(g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS], 0);
+#endif
 		CVFD::getInstance()->setBacklight(g_settings.backlight_standby);
 
 		InfoClock->enableInfoClock(false);
@@ -4760,7 +4763,11 @@
 		// Active standby off
 		powerManager->SetStandby(false, false);
 		CVFD::getInstance()->setMode(CVFD::MODE_TVRADIO);
-		CVFD::getInstance()->ShowText("resume");
+#if defined (FORTIS_HDBOX) || defined (TF7700)
+		CVFD::getInstance()->setlcdparameter(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS], 1);
+#endif
+		CVFD::getInstance()->ClearIcons();
+		CVFD::getInstance()->ShowText("Resume");
 		cpuFreq->SetCpuFreq(g_settings.cpufreq * 1000 * 1000);
 		videoDecoder->Standby(false);
 		CEpgScan::getInstance()->Stop();
--- neutrino-mp-tangos/src/driver/simple_display.cpp.org
+++ neutrino-mp-tangos/src/driver/simple_display.cpp
@@ -39,6 +39,9 @@
 #include <sys/stat.h>
 
 #if HAVE_SPARK_HARDWARE
+struct semaphore {
+	int dummy;
+};
 #include <aotom_main.h>
 #define DISPLAY_DEV "/dev/vfd"
 #include <zapit/zapit.h>
@@ -747,8 +750,26 @@
 		close(fd);
 	}
 }
+
+void CLCD::ClearIcons()
+{
+	struct aotom_ioctl_data d;
+	d.u.icon.icon_nr = 46;
+	d.u.icon.on = 0;
+	if (g_info.hw_caps->display_type == HW_DISPLAY_LINE_TEXT) {
+		int fd = dev_open();
+		if (fd < 0)
+			return;
+		if (ioctl(fd, VFDICONDISPLAYONOFF, &d) <0)
+			perror("[neutrino] CLCD::ClearIcons() VFDICONDISPLAYONOFF");
+		close(fd);
+	}
+}
 #else
 void CLCD::SetIcons(int, bool)
+{
+}
+void CLCD::ClearIcons()
 {
 }
 #endif
--- neutrino-mp-tangos.org/src/driver/simple_display.h
+++ neutrino-mp-tangos/src/driver/simple_display.h
@@ -212,6 +212,7 @@
 		void Unlock();
 		void Clear();
 		void SetIcons(int icon, bool show);
+		void ClearIcons();
 		void UpdateIcons();
 		void ShowDiskLevel();
 		void Reset() {};
--- neutrino-mp-tangos.org/src/driver/vfd.cpp
+++ neutrino-mp-tangos/src/driver/vfd.cpp
@@ -52,21 +52,30 @@
 #include <stropts.h>
 #define VFD_DEVICE "/dev/vfd"
 
-#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_TF7700)
+#if defined (BOXMODEL_OCTAGON1008) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7429) \
+ || defined (BOXMODEL_TF7700)
 #define VFDLENGTH 8
-#elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+#elif defined (BOXMODEL_FORTIS_HDBOX) \
+ || defined (BOXMODEL_ATEVIO7500)
 #define VFDLENGTH 12
-#elif defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7819) || defined (BOXMODEL_CUBEREVO_250HD) || defined (BOXMODEL_IPBOX55)
+#elif defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7819) \
+ || defined (BOXMODEL_CUBEREVO_250HD) \
+ || defined (BOXMODEL_IPBOX55)
 #define VFDLENGTH 4
 #elif defined (BOXMODEL_HS7110)
 #define VFDLENGTH 0
-#elif defined (BOXMODEL_IPBOX9900) || defined (BOXMODEL_IPBOX99)
+#elif defined (BOXMODEL_IPBOX9900) \
+ || defined (BOXMODEL_IPBOX99)
 #define VFDLENGTH 14
 #else
 #define VFDLENGTH 16
 #endif
 
-#define SCROLL_TIME 100000
+#define SCROLL_TIME 500000
 
 bool invert = false;
 bool blocked = false;
@@ -119,7 +128,8 @@
 	}
 }
 
-#if defined (BOXMODEL_UFS910) || defined (BOXMODEL_UFS922)
+#if defined (BOXMODEL_UFS910) \
+ || defined (BOXMODEL_UFS922)
 static void writeCG (unsigned char adress, unsigned char pixeldata[5])
 {
 	struct vfd_ioctl_data data;
@@ -137,7 +147,15 @@
 
 static void ShowNormalText(char * str, bool fromScrollThread = false)
 {
-	if (blocked)
+	int colon_at_2 = 0;
+
+#if defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7819)
+	if (str[2] == 0x3a)
+	{
+		colon_at_2++;
+	}
+#endif
+ 	if (blocked)
 	{
 		printf("[CVFD] - blocked\n");
 		usleep(SCROLL_TIME);
@@ -156,32 +174,45 @@
 			vfd_scrollText = 0;
 		}
 	}
+#if defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7819)
+	if ((strlen(str) > VFDLENGTH + colon_at_2 && !fromScrollThread) && (g_settings.lcd_vfd_scroll >= 1))
+#else
 	if ((strlen(str) > VFDLENGTH && !fromScrollThread) && (g_settings.lcd_vfd_scroll >= 1))
+#endif
 	{
 		CVFD::getInstance()->ShowScrollText(str);
 		return;
 	}
 
-	if (strlen(str) < VFDLENGTH && VFDLENGTH > 7) // do not center on small displays
-		ws = (VFDLENGTH-strlen(str))/2;
+	if (strlen(str) < VFDLENGTH + colon_at_2 && VFDLENGTH > 7) // do not center on small displays
+	{
+		ws = (VFDLENGTH-strlen(str)) / 2;
+	}
 	else
+	{
 		ws = 0;
+	}
 	memset(data.data, ' ', 63);
 	if (!fromScrollThread)
 	{
-		memcpy (data.data+ws, str, VFDLENGTH-ws);
+		memcpy (data.data + ws, str, VFDLENGTH - ws + colon_at_2);
 		data.start = 0;
 		if ((strlen(str) % 2) == 1 && VFDLENGTH > 7) // do not center on small displays
-			data.length = VFDLENGTH-ws-1;
-		else
-			data.length = VFDLENGTH-ws;
+		{
+			data.length = VFDLENGTH - ws - 1 + colon_at_2;
+		}
+ 		else
+		{
+			data.length = VFDLENGTH - ws + colon_at_2;
+		}
 	}
 	else
 	{
-		memcpy ( data.data, str, VFDLENGTH);
+		memcpy ( data.data, str, VFDLENGTH + colon_at_2);
 		data.start = 0;
-		data.length = VFDLENGTH;
-	}
+		data.length = VFDLENGTH + colon_at_2;
+	}
+//	printf("CVFD::ShowNormalText: [%s]\n", str);
 	write_to_vfd(VFDDISPLAYCHARS, &data);
 	return;
 }
@@ -341,47 +372,62 @@
 	return lcdd;
 }
 
-void CVFD::count_down() {
-	if (timeout_cnt > 0) {
+void CVFD::count_down()
+{
+	if (timeout_cnt > 0)
+	{
 		timeout_cnt--;
-		if (timeout_cnt == 0 ) {
-			if (g_settings.lcd_setting_dim_brightness > -1) {
+		if (timeout_cnt == 0 )
+		{
+			if (g_settings.lcd_setting_dim_brightness > -1)
+			{
 				// save lcd brightness, setBrightness() changes global setting
 				int b = g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS];
 				setBrightness(g_settings.lcd_setting_dim_brightness);
 				g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] = b;
-			} else {
+			}
+			else
+			{
 				setPower(0);
 			}
 		}
 	}
-	if (g_settings.lcd_info_line && switch_name_time_cnt > 0) {
+	if (g_settings.lcd_info_line && switch_name_time_cnt > 0)
+	{
 	  switch_name_time_cnt--;
-		if (switch_name_time_cnt == 0) {
-			if (g_settings.lcd_setting_dim_brightness > -1) {
+		if (switch_name_time_cnt == 0)
+		{
+			if (g_settings.lcd_setting_dim_brightness > -1)
+			{
 				CVFD::getInstance()->showTime(true);
 			}
 		}
 	}
 }
 
-void CVFD::wake_up() {
-	if(fd < 0) return;
-
-	if (atoi(g_settings.lcd_setting_dim_time.c_str()) > 0) {
+void CVFD::wake_up()
+{
+	if (fd < 0)
+	{
+		return;
+	}
+	if (atoi(g_settings.lcd_setting_dim_time.c_str()) > 0)
+	{
 		timeout_cnt = atoi(g_settings.lcd_setting_dim_time.c_str());
 		g_settings.lcd_setting_dim_brightness > -1 ?
 			setBrightness(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS]) : setPower(1);
 	}
 	else
+	{
 		setPower(1);
-	if(g_settings.lcd_info_line){
+	}
+	if (g_settings.lcd_info_line)
+	{
 		switch_name_time_cnt = g_settings.handling_infobar[SNeutrinoSettings::HANDLING_INFOBAR] + 10;
 	}
 #if defined (BOXMODEL_OCTAGON1008)
 	ShowIcon(ICON_COLON2, false);
 #endif
-
 }
 
 void* CVFD::TimeThread(void *)
@@ -389,11 +435,15 @@
 	while(1) {
 		sleep(1);
 		struct stat buf;
-                if (stat("/tmp/vfd.locked", &buf) == -1) {
-                        CVFD::getInstance()->showTime();
-                        CVFD::getInstance()->count_down();
-                } else
-                        CVFD::getInstance()->wake_up();
+                if (stat("/tmp/vfd.locked", &buf) == -1)
+		{
+                	CVFD::getInstance()->showTime();
+                	CVFD::getInstance()->count_down();
+                }
+		else
+		{
+                	CVFD::getInstance()->wake_up();
+		}
 	}
 	return NULL;
 }
@@ -428,7 +478,7 @@
 
 	brightness = dimm;
 
-printf("CVFD::setlcdparameter dimm %d power %d\n", dimm, power);
+	printf("CVFD::setlcdparameter dimm %d power %d\n", dimm, power);
 #if !HAVE_DUCKBOX_HARDWARE
 	int ret = ioctl(fd, IOC_FP_SET_BRIGHT, dimm);
 	if(ret < 0)
@@ -436,51 +486,57 @@
 #else
 // Brightness
 	struct vfd_ioctl_data data;
-#if !defined (BOXMODEL_HS7810A) && !defined (BOXMODEL_HS7119) && !defined (BOXMODEL_HS7819)
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
 	data.start = brightness & 0x07;
 	data.length = 0;
 	write_to_vfd(VFDBRIGHTNESS, &data);
-#endif
-#if defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+#if defined (BOXMODEL_FORTIS_HDBOX) \
+ || defined (BOXMODEL_ATEVIO7500)
 	usleep(100000);
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
-	data.start = 0;
+	if (power) {
+		data.start = 0x01; // red led
+	}
+	else
+	{
+		data.start = 0xf2; // cross plus blue led
+	}
+	data.data[3] = 0; // off
+	data.data[0] = 0;
+	data.data[1] = 0;
+	data.data[4] = 0;
 	data.length = 5;
+	write_to_vfd(VFDSETLED, &data);
+	usleep(100000);
+	memset(&data, 0, sizeof(struct vfd_ioctl_data));
 	if (power) {
-		data.data[0] = 0x01; // red led
+		data.start = 0xf2; // cross plus blue led
 	}
 	else
 	{
-		data.data[0] = 0xf2; // cross plus blue led
-	}
-	data.start = 0;
-	data.data[4] = 0; // off
+		data.start = 0x01; // red led
+	}
+	data.data[3] = brightness * 2;
+	data.data[0] = 0;
+	data.data[1] = 0;
+	data.data[4] = 0;
 	data.length = 5;
 	write_to_vfd(VFDPWRLED, &data);
-	usleep(100000);
+#elif defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7429) \
+ || defined (BOXMODEL_HS7819)
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
-	data.start = 0;
+	data.start = 0x02; // logo
+	data.data[3] = (brightness & 0x07);
+	data.data[0] = 0;
+	data.data[1] = 0;
+	data.data[4] = 0;
 	data.length = 5;
-	if (power) {
-		data.data[0] = 0xf2; // cross plus blue led
-	}
-	else
-	{
-		data.data[0] = 0x01; // red led
-	}
-	data.start = 0;
-	data.data[4] = brightness*2;
-	data.length = 5;
-	write_to_vfd(VFDPWRLED, &data);
-#elif defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7819)
-	memset(&data, 0, sizeof(struct vfd_ioctl_data));
-	data.start = 0;
-	data.data[0] = 0x02; // logo
-	data.data[4] = (brightness & 0x07);
-	data.length = 5;
-	write_to_vfd(VFDPWRLED, &data);
-#elif !defined (BOXMODEL_UFS912) && !defined (BOXMODEL_UFS913) && !defined (BOXMODEL_OCTAGON1008)
+	write_to_vfd(VFDSETLED, &data);
+#elif !defined (BOXMODEL_UFS912) \
+ && !defined (BOXMODEL_UFS913) \
+ && !defined (BOXMODEL_OCTAGON1008)
 // Power on/off
 	if (power) {
 		data.start = 0x01;
@@ -605,18 +661,24 @@
 {
 	if(fd < 0) return;
 
-printf("CVFD::showServicename: %s\n", name.c_str());
+	printf("CVFD::showServicename: %s\n", name.c_str());
 	servicename = name;
 	service_number = number;
 
 	if (mode != MODE_TVRADIO)
 		return;
 
-	if (support_text)
+//	if (support_text)
+	if (((support_text) && VFDLENGTH > 7) || service_number < 0)
+	{
+		printf("CVFD::showServicename: [%s]\n", name.c_str());
 		ShowText(name.c_str());
+	}
 	else
+	{
+		printf("CVFD::showServicename: [%d]\n", service_number);
 		ShowNumber(service_number);
-	wake_up();
+	}
 }
 
 void CVFD::showTime(bool force)
@@ -627,73 +689,94 @@
 	if(!has_lcd)
 		return;
 #endif
-	if(fd >= 0 && mode == MODE_SHUTDOWN) {
+	if (fd >= 0 && mode == MODE_SHUTDOWN)
+	{
 		ShowIcon(FP_ICON_CAM1, false);
 		return;
 	}
-	if (fd >= 0 && showclock) {
-		if (mode == MODE_STANDBY || ( g_settings.lcd_info_line && (MODE_TVRADIO == mode))) {
+	if (fd >= 0 && showclock)
+	{
+		if (mode == MODE_STANDBY || ( g_settings.lcd_info_line && (MODE_TVRADIO == mode)))
+		{
 			char timestr[21];
 			struct timeb tm;
 			struct tm * t;
-			static int hour = 0, minute = 0;
+			static int hour = 0, minute = 0, second = 0;
 
 			ftime(&tm);
 			t = localtime(&tm.time);
-			if(force || ( switch_name_time_cnt == 0 && ((hour != t->tm_hour) || (minute != t->tm_min))) ) {
+			if (force || ( switch_name_time_cnt == 0 && ((hour != t->tm_hour) || (minute != t->tm_min) || (second != t->tm_sec))) )
+			{
 				hour = t->tm_hour;
 				minute = t->tm_min;
-#if !defined (BOXMODEL_HS7810A) && !defined (BOXMODEL_HS7819)
+				second = t->tm_sec;
 #if defined (BOXMODEL_OCTAGON1008)
-				ShowIcon(ICON_COLON2, true);
-#elif defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_HS7119) || defined (BOXMODEL_CUBEREVO_250HD)
+
+				ShowIcon(ICON_COLON2, second % 2 == 0 ? true : false);
 				strftime(timestr, 5, "%H%M", t);
+				ShowText(timestr);
+#elif defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7429)
+
+				ShowIcon(ICON_COLON2, second % 2 == 0 ? true : false);
+				strftime(timestr, 5, "%H%M", t);
+				ShowText(timestr);
+#elif defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7819)
+
+				strftime(timestr, 5, "%H%M", t);
+				ShowText(timestr);
+				ShowIcon(ICON_COLON, second % 2 == 0 ? true : false);
+#elif defined (BOXMODEL_FORTIS_HDBOX)
+				ShowIcon(ICON_COLON3, second % 2 == 0 ? true : false);
+				strftime(timestr, 13, "        %H%M", t);
+				ShowText(timestr);
+#elif defined (BOXMODEL_CUBEREVO_250HD)
+				strftime(timestr, 5, "%H%M", t);
+				ShowText(timestr);
 #else
-				strftime(timestr, 6, "%H:%M", t);
-#endif
-				ShowText(timestr);
-#else //HS7810A or HS7819, string should not scroll
-				strftime(timestr, 6, "%H:%M", t);
-				struct vfd_ioctl_data data;
-				memset(data.data, ' ', 6);
-				memcpy (data.data, timestr, 6);
-				data.start = 0;
-				data.length = 5;
-				write_to_vfd(VFDDISPLAYCHARS, &data);
-#endif
-				if (support_text) {
+				if (support_text)
+				{
 					strftime(timestr, 20, "%H:%M", t);
 					ShowText(timestr);
-				} else if (support_numbers && has_led_segment) {
+				} else if (support_numbers && has_led_segment)
+				{
 					ShowNumber((t->tm_hour*100) + t->tm_min);
 #ifdef BOXMODEL_CS_HD2
 					ioctl(fd, IOC_FP_SET_COLON, 0x01);
 #endif
 				}
+#endif
 			}
 		}
 	}
-
 	int tmp_recstatus = CNeutrinoApp::getInstance()->recordingstatus;
-	if (tmp_recstatus) {
-		if(clearClock) {
+	if (tmp_recstatus)
+	{
+		if (clearClock)
+		{
 			clearClock = 0;
-			if(has_lcd)
+			if (has_lcd)
 				ShowIcon(FP_ICON_CAM1, false);
 #if !HAVE_DUCKBOX_HARDWARE
 			setled(false);//off
 #endif
-		} else {
+		}
+		else
+		{
 			clearClock = 1;
-			if(has_lcd)
+			if (has_lcd)
 				ShowIcon(FP_ICON_CAM1, true);
 #if !HAVE_DUCKBOX_HARDWARE
 			setled(true);//on
 #endif
 		}
-	} else if(clearClock || (recstatus != tmp_recstatus)) { // in case icon ON after record stopped
+	}
+	else if (clearClock || (recstatus != tmp_recstatus))
+	{ // in case icon ON after record stopped
 		clearClock = 0;
-		if(has_lcd)
+		if (has_lcd)
 			ShowIcon(FP_ICON_CAM1, false);
 
 #if !HAVE_DUCKBOX_HARDWARE
@@ -713,7 +796,9 @@
 		ShowIcon(FP_ICON_HD,chan->isHD());
 		ShowIcon(FP_ICON_LOCK,!chan->camap.empty());
 		if (chan->getAudioChannel() != NULL)
+		{
 			ShowIcon(FP_ICON_DD, chan->getAudioChannel()->audioChannelType == CZapitAudioChannel::AC3);
+		}
 	}
 }
 #endif
@@ -753,7 +838,8 @@
 		int pp = (int) round((double) vol / (double) 2);
 		if(oldpp != pp)
 		{
-#if defined (BOXMODEL_UFS910) || defined (BOXMODEL_UFS922)
+#if defined (BOXMODEL_UFS910) \
+ || defined (BOXMODEL_UFS922)
 			int i;
 			unsigned char speaker[5] = {0x1C, 0x1C, 0x1C, 0x3E, 0x7F}; // speaker symbol
 			writeCG(0, speaker);
@@ -800,15 +886,31 @@
 			char vol_chr[64] = "";
 			snprintf(vol_chr, sizeof(vol_chr)-1, "VOL: %d%%", (int)vol);
 			ShowText(vol_chr);
-#elif defined (BOXMODEL_OCTAGON1008)
+#elif defined (BOXMODEL_OCTAGON1008) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7429)
 			char vol_chr[64] = "";
-			snprintf(vol_chr, sizeof(vol_chr)-1, "VOL=%3d", (int)vol);
+			snprintf(vol_chr, sizeof(vol_chr)-1, "VOL=%3d%%", (int)vol);
 			ShowText(vol_chr);
-#elif defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7819) || defined (BOXMODEL_CUBEREVO_250HD) || defined (BOXMODEL_IPBOX55)
+#elif defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7819) \
+ || defined (BOXMODEL_CUBEREVO_250HD) \
+ || defined (BOXMODEL_IPBOX55)
 			char vol_chr[64] = "";
 			snprintf(vol_chr, sizeof(vol_chr)-1, "v%3d", (int)vol);
 			ShowText(vol_chr);
-#elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500) || defined (BOXMODEL_UFS912) || defined (BOXMODEL_UFS913) || defined (BOXMODEL_CUBEREVO) || defined (BOXMODEL_CUBEREVO_MINI) || defined (BOXMODEL_CUBEREVO_MINI2) || defined (BOXMODEL_CUBEREVO_2000HD) || defined (BOXMODEL_CUBEREVO_3000HD) || defined (BOXMODEL_IPBOX9900) || defined (BOXMODEL_IPBOX99)
+#elif defined (BOXMODEL_FORTIS_HDBOX) \
+ || defined (BOXMODEL_ATEVIO7500) \
+ || defined (BOXMODEL_UFS912) \
+ || defined (BOXMODEL_UFS913) \
+ || defined (BOXMODEL_CUBEREVO) \
+ || defined (BOXMODEL_CUBEREVO_MINI) \
+ || defined (BOXMODEL_CUBEREVO_MINI2) \
+ || defined (BOXMODEL_CUBEREVO_2000HD) \
+ || defined (BOXMODEL_CUBEREVO_3000HD) \
+ || defined (BOXMODEL_IPBOX9900) \
+ || defined (BOXMODEL_IPBOX99)
 			char vol_chr[64] = "";
 			snprintf(vol_chr, sizeof(vol_chr)-1, "Volume: %d%%", (int)vol);
 			ShowText(vol_chr);
@@ -820,15 +922,18 @@
 		int pp = (int) round((double) vol * (double) 8 / (double) 100);
 		if(pp > 8) pp = 8;
 
-		if(force_update || oldpp != pp) {
-printf("CVFD::showVolume: %d, bar %d\n", (int) vol, pp);
+		if(force_update || oldpp != pp)
+		{
+			printf("CVFD::showVolume: %d, bar %d\n", (int) vol, pp);
 			int i;
 			int j = 0x00000200;
-			for(i = 0; i < pp; i++) {
+			for (i = 0; i < pp; i++)
+			{
 				ShowIcon((fp_icon) j, true);
 				j /= 2;
 			}
-			for(;i < 8; i++) {
+			for (;i < 8; i++)
+			{
 				ShowIcon((fp_icon) j, false);
 				j /= 2;
 			}
@@ -866,7 +971,7 @@
 		if(pp > 8) pp = 8;
 
 		if(pp != ppold) {
-//printf("CVFD::showPercentOver: %d, bar %d\n", (int) perc, pp);
+//			printf("CVFD::showPercentOver: %d, bar %d\n", (int) perc, pp);
 			int i;
 			int j = 0x00000200;
 			for(i = 0; i < pp; i++) {
@@ -898,7 +1003,7 @@
 	if(fd < 0) return;
 	if (mode != MODE_AUDIO)
 		return;
-printf("CVFD::showAudioTrack: %s\n", title.c_str());
+	printf("CVFD::showAudioTrack: %s\n", title.c_str());
 	ShowText(title.c_str());
 	wake_up();
 
@@ -983,7 +1088,30 @@
 		ShowIcon(FP_ICON_COL2, false);
 	}
 #endif
-
+#if defined (BOXMODEL_OCTAGON1008)
+	else if (mode == MODE_STANDBY)
+	{
+		ShowIcon(ICON_COLON2, true);
+	}
+#elif defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7429)
+	else if (mode == MODE_STANDBY)
+	{
+		ShowIcon(ICON_COLON2, true);
+	}
+#elif defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7819)
+	else if (mode == MODE_STANDBY)
+	{
+		ShowIcon(ICON_COLON, true);
+	}
+#elif defined (BOXMODEL_FORTIS_HDBOX)
+	else if (mode == MODE_STANDBY)
+	{
+		ShowIcon(ICON_COLON3, true);
+	}
+#endif
 	if(strlen(title))
 		ShowText(title);
 	mode = m;
@@ -1086,7 +1214,15 @@
 int CVFD::getBrightness()
 {
 	//FIXME for old neutrino.conf
-#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+#if defined (BOXMODEL_OCTAGON1008) \
+ || defined (BOXMODEL_FORTIS_HDBOX) \
+ || defined (BOXMODEL_ATEVIO7500) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7429) \
+ || defined (BOXMODEL_HS7819)
 	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] > 7)
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] = 7;
 #else
@@ -1108,7 +1244,15 @@
 int CVFD::getBrightnessStandby()
 {
 	//FIXME for old neutrino.conf
-#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+#if defined (BOXMODEL_OCTAGON1008) \
+ || defined (BOXMODEL_FORTIS_HDBOX) \
+ || defined (BOXMODEL_ATEVIO7500) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7429) \
+ || defined (BOXMODEL_HS7819)
 	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] > 7)
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] = 7;
 #else
@@ -1129,7 +1273,15 @@
 int CVFD::getBrightnessDeepStandby()
 {
 	//FIXME for old neutrino.conf
-#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+#if defined (BOXMODEL_OCTAGON1008) \
+ || defined (BOXMODEL_FORTIS_HDBOX) \
+ || defined (BOXMODEL_ATEVIO7500) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7429) \
+ || defined (BOXMODEL_HS7819)
 	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] > 7)
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] = 7;
 #else
@@ -1200,13 +1352,22 @@
 	else
 		text.clear();
 #else
-#if defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7819) || defined (BOXMODEL_CUBEREVO_250HD) || defined (BOXMODEL_IPBOX55)
+#if defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7819) \
+ || defined (BOXMODEL_CUBEREVO_250HD) \
+ || defined (BOXMODEL_IPBOX55)
 	ShowText("    ");
-#elif defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_TF7700)
+#elif defined (BOXMODEL_OCTAGON1008) \
+ || defined (BOXMODEL_HS7420) \
+ || defined (BOXMODEL_HS7429) \
+ || defined (BOXMODEL_TF7700)
 	ShowText("        ");
-#elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+#elif defined (BOXMODEL_FORTIS_HDBOX) \
+ || defined (BOXMODEL_ATEVIO7500)
 	ShowText("            ");
-#elif defined (BOXMODEL_IPBOX9900) || defined (BOXMODEL_IPBOX99)
+#elif defined (BOXMODEL_IPBOX9900) \
+ || defined (BOXMODEL_IPBOX99)
 	ShowText("              ");
 #elif !defined (BOXMODEL_HS7110)
 	ShowText("                ");
@@ -1217,25 +1378,38 @@
 void CVFD::ShowIcon(fp_icon icon, bool show)
 {
 #if !HAVE_DUCKBOX_HARDWARE
-	if(!has_lcd || fd < 0) return;
-//printf("CVFD::ShowIcon %s %x\n", show ? "show" : "hide", (int) icon);
+	if(!has_lcd || fd < 0)
+		return;
+
+//	printf("CVFD::ShowIcon %s %02d\n", show ? "show" : "hide", (int) icon);
 	int ret = ioctl(fd, show ? IOC_FP_SET_ICON : IOC_FP_CLEAR_ICON, icon);
 	if(ret < 0)
 		perror(show ? "IOC_FP_SET_ICON" : "IOC_FP_CLEAR_ICON");
 #else
-#if defined (BOXMODEL_ATEVIO7500) || defined (BOXMODEL_HS7110) || defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7819)
+    #if defined (BOXMODEL_HS7110)
 	return;
-#endif
+    #endif
 	if (icon == 0)
 		return;
 
+#if !defined (BOXMODEL_OCTAGON1008) \
+ && !defined (BOXMODEL_FORTIS_HDBOX) \
+ && !defined (BOXMODEL_ATEVIO7500) \
+ && !defined (BOXMODEL_HS7420) \
+ && !defined (BOXMODEL_HS7810A) \
+ && !defined (BOXMODEL_HS7420) \
+ && !defined (BOXMODEL_HS7119) \
+ && !defined (BOXMODEL_HS7429) \
+ && !defined (BOXMODEL_HS7819)
 	if (active_icon[icon & 0x0F] == show)
 		return;
 	else
 		active_icon[icon & 0x0F] = show;
-
-	//printf("CVFD::ShowIcon %s %x\n", show ? "show" : "hide", (int) icon);
+#endif
+//	printf("CVFD::ShowIcon %s #%02d\n", show ? "show" : "hide", (int) icon);
+
 	struct vfd_ioctl_data data;
+
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
 	data.start = 0x00;
 	data.data[0] = icon;
@@ -1249,17 +1423,12 @@
 #ifdef HAVE_DUCKBOX_HARDWARE
 void CVFD::ClearIcons()
 {
-#if defined (BOXMODEL_ATEVIO7500) || defined (BOXMODEL_HS7110) || defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7819)
+  #if defined (BOXMODEL_HS7110)
 	return;
-#endif
-	for (int id = 0x10; id < FP_ICON_MAX; id++) {
-#if defined (BOXMODEL_OCTAGON1008)
+  #endif
+//	printf("CVFD::ClearIcons, min=%02d, max=%02d\n", FP_ICON_MIN, FP_ICON_MAX);
+	for (int id = FP_ICON_MIN; id < FP_ICON_MAX; id++) {
 		if (id != FP_ICON_USB && id != FP_ICON_HDD)
-#elif defined(BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_TF7700)
-		if (id != FP_ICON_USB)
-#else
-		if (id != 0x10 && id != 0x12)
-#endif
 			ShowIcon((fp_icon)id, false);
 	}
 	return;
@@ -1271,7 +1440,8 @@
 	memcpy(g_str, str, sizeof(g_str)-1);
 
 	int i = strlen(str);
-	if (i > 63) {
+	if (i > 63)
+	{
 		g_str[60] = '.';
 		g_str[61] = '.';
 		g_str[62] = '.';
@@ -1283,11 +1453,11 @@
 void CVFD::repaintIcons()
 {
 	char * model = g_info.hw_caps->boxname;
-	if(strstr(model, "ufs912") || strstr(model, "ufs913"))
+	if (strstr(model, "ufs912") || strstr(model, "ufs913"))
 	{
 		bool tmp_icon[16] = {false};
 		printf("VFD repaint icons boxmodel: %s\n", model);
-		for (int i = 0x10; i < FP_ICON_MAX; i++)
+		for (int i = FP_ICON_MIN; i < FP_ICON_MAX; i++)
 		{
 			tmp_icon[i & 0x0F] = active_icon[i & 0x0F];
 			active_icon[i & 0x0F] = false;
@@ -1295,7 +1465,7 @@
 		}
 	}
 }
-#else
+#else // non-duckbox
 void CVFD::ShowText(const char * str)
 {
 	if (fd < 0 || !support_text)
@@ -1335,11 +1505,26 @@
 	if (number < 0)
 		return;
 	
+//	printf("CVFD::ShowNumber: [%d]\n", number);
 #ifdef BOXMODEL_CS_HD2
 	int ret = ioctl(fd, IOC_FP_SET_NUMBER, number);
-	if(ret < 0) {
+	if (ret < 0)
+	{
 		support_numbers = false;
 		perror("IOC_FP_SET_NUMBER");
+	}
+#else
+	{
+		char buffer[VFDLENGTH + 1];
+		int n;
+
+		memset(buffer, 0, sizeof(buffer));
+  #if defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7819)
+		n = sprintf(buffer, "%04d", number);
+  #else
+		n = sprintf(buffer, "%4d", number);
+  #endif
+		CVFD::ShowText(buffer);
 	}
 #endif
 }
--- neutrino-mp-tangos.org/src/gui/movieplayer.cpp
+++ neutrino-mp-tangos/src/gui/movieplayer.cpp
@@ -82,10 +82,10 @@
 #include <iconv.h>
 #include <libdvbsub/dvbsub.h>
 #include <hardware/audio.h>
-#ifdef ENABLE_GRAPHLCD
-#include <driver/nglcd.h>
+//#ifdef ENABLE_GRAPHLCD
+//#include <driver/nglcd.h>
 bool glcd_play = false;
-#endif
+//#endif
 #include <gui/widget/stringinput_ext.h>
 #include <gui/screensetup.h>
 #include <gui/widget/msgbox.h>
@@ -1452,15 +1452,15 @@
 #if HAVE_SH4_HARDWARE
 	old3dmode = frameBuffer->get3DMode();
 #endif
-#ifdef ENABLE_GRAPHLCD
-	nGLCD::MirrorOSD(false);
-	if (p_movie_info)
-		nGLCD::lockChannel(p_movie_info->channelName, p_movie_info->epgTitle);
-	else {
-		glcd_play = true;
-		nGLCD::lockChannel(g_Locale->getText(LOCALE_MOVIEPLAYER_HEAD), file_name.c_str(), file_prozent);
-	}
-#endif
+//#ifdef ENABLE_GRAPHLCD
+//	nGLCD::MirrorOSD(false);
+//	if (p_movie_info)
+//		nGLCD::lockChannel(p_movie_info->channelName, p_movie_info->epgTitle);
+//	else {
+//		glcd_play = true;
+//		nGLCD::lockChannel(g_Locale->getText(LOCALE_MOVIEPLAYER_HEAD), file_name.c_str(), file_prozent);
+//	}
+//#endif
 	pthread_t thrStartHint = 0;
 	if (is_file_player) {
 		showStartingHint = true;
@@ -1678,14 +1678,14 @@
 
 	while (playstate >= CMoviePlayerGui::PLAY)
 	{
-#ifdef ENABLE_GRAPHLCD
-		if (p_movie_info)
-			nGLCD::lockChannel(p_movie_info->channelName, p_movie_info->epgTitle, duration ? (100 * position / duration) : 0);
-		else {
-			glcd_play = true;
-			nGLCD::lockChannel(g_Locale->getText(LOCALE_MOVIEPLAYER_HEAD), file_name.c_str(), file_prozent);
-		}
-#endif
+//#ifdef ENABLE_GRAPHLCD
+//		if (p_movie_info)
+//			nGLCD::lockChannel(p_movie_info->channelName, p_movie_info->epgTitle, duration ? (100 * position / duration) : 0);
+//		else {
+//			glcd_play = true;
+//			nGLCD::lockChannel(g_Locale->getText(LOCALE_MOVIEPLAYER_HEAD), file_name.c_str(), file_prozent);
+//		}
+//#endif
 		if (update_lcd || g_settings.movieplayer_display_playtime) {
 			update_lcd = false;
 			updateLcd(g_settings.movieplayer_display_playtime);
@@ -2255,12 +2255,12 @@
 	CScreenSetup cSS;
 	cSS.showBorder(CZapit::getInstance()->GetCurrentChannelID());
 #endif
-#ifdef ENABLE_GRAPHLCD
-	if (p_movie_info || glcd_play == true) {
-		glcd_play = false;
-		nGLCD::unlockChannel();
-	}
-#endif
+//#ifdef ENABLE_GRAPHLCD
+//	if (p_movie_info || glcd_play == true) {
+//		glcd_play = false;
+//		nGLCD::unlockChannel();
+//	}
+//#endif
 	if (iso_file) {
 		iso_file = false;
 		if (umount2(ISO_MOUNT_POINT, MNT_FORCE))
@@ -2380,10 +2380,10 @@
 		}
 		if (!movie_info.channelName.empty() || !movie_info.epgTitle.empty())
 			p_movie_info = &movie_info;
-#ifdef ENABLE_GRAPHLCD
-		if (p_movie_info)
-			nGLCD::lockChannel(p_movie_info->channelName, p_movie_info->epgTitle);
-#endif
+//#ifdef ENABLE_GRAPHLCD
+//		if (p_movie_info)
+//			nGLCD::lockChannel(p_movie_info->channelName, p_movie_info->epgTitle);
+//#endif
 	}
 
 	if (p_movie_info) {
@@ -2905,10 +2905,10 @@
 		tuxtx_pause_subtitle(true);
 		frameBuffer->paintBackground();
 	}
-#ifdef ENABLE_GRAPHLCD
-	if (enable_glcd_mirroring)
-		nGLCD::MirrorOSD(g_settings.glcd_mirror_osd);
-#endif
+//#ifdef ENABLE_GRAPHLCD
+//	if (enable_glcd_mirroring)
+//		nGLCD::MirrorOSD(g_settings.glcd_mirror_osd);
+//#endif
 #endif
 }
 
@@ -2946,9 +2946,9 @@
 {
 #if HAVE_SH4_HARDWARE || HAVE_ARM_HARDWARE
 	printf("[CMoviePlayerGui] %s: %s\n", __FUNCTION__, show ? "Show" : "Not show");
-#ifdef ENABLE_GRAPHLCD
-	nGLCD::MirrorOSD(false);
-#endif
+//#ifdef ENABLE_GRAPHLCD
+//	nGLCD::MirrorOSD(false);
+//#endif
 
 	if(!show)
 		return;
#--- neutrino-mp-tangos/src/driver/pictureviewer/pictureviewer.cpp
#+++ neutrino-mp-tangos/src/driver/pictureviewer/pictureviewer.cpp
#@@ -566,8 +566,10 @@
# 
# 		// add neccessary paths to v_path
# 		v_path.clear();
#+#ifdef ENABLE_LCD4LINUX
# 		if (lcd4l_mode)
# 			v_path.push_back(g_settings.lcd4l_logodir);
#+#endif
# 		v_path.push_back(g_settings.logo_hdd_dir);
# 		if (g_settings.logo_hdd_dir != LOGODIR_VAR)
# 			v_path.push_back(LOGODIR_VAR);
#@@ -669,9 +671,11 @@
# 
# 		for (size_t f = 0; f < v_file.size(); f++)
# 		{
#+#ifdef ENABLE_LCD4LINUX
# 			// process g_settings.lcd4l_logodir
# 			if (lcd4l_mode)
# 				v_path.push_back(g_settings.lcd4l_logodir + "/" + v_file[f] + fileType[i]);
#+#endif
# 			// process g_settings.logo_hdd_dir
# 			v_path.push_back(g_settings.logo_hdd_dir + "/" + v_file[f] + fileType[i]);
# 			// process LOGODIR_VAR
--- neutrino-mp-tangos.org/lib/jsoncpp/jsoncpp.cpp
+++ neutrino-mp-tangos/lib/jsoncpp/jsoncpp.cpp
@@ -101,6 +101,8 @@
 #ifndef JSONCPP_NO_LOCALE_SUPPORT
 #include <clocale>
 #endif
+
+#include <stdio.h>
 
 /* This header provides common string manipulation support, such as UTF-8,
  * portable conversion from/to string...

