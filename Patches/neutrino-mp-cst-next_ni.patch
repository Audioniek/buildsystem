--- neutrino-mp-cst-next_ni/acinclude.m4
+++ neutrino-mp-cst-next_ni/acinclude.m4
@@ -316,9 +316,9 @@
 
 AC_DEFUN([TUXBOX_BOXTYPE],[
 AC_ARG_WITH(boxtype,
-	[  --with-boxtype          valid values: tripledragon,coolstream,spark,azbox,generic,armbox],
+	[  --with-boxtype          valid values: tripledragon,coolstream,spark,azbox,generic,armbox,duckbox],
 	[case "${withval}" in
-		tripledragon|coolstream|spark|azbox|generic|armbox)
+		tripledragon|coolstream|spark|azbox|generic|armbox|duckbox)
 			BOXTYPE="$withval"
 			;;
 		*)
@@ -329,6 +329,7 @@
 	[  --with-boxmodel         valid for coolstream: hd1, hd2
                           valid for armbox: hd51
                           valid for generic: raspi],
+                          valid for duckbox: ufs910, ufs912, ufs913, ufs922, atevio7500, fortis_hdbox, octagon1008, hs7110, hs7420, hs7810a, hs7119, hs7429, hs7819, cuberevo, cuberevo_mini, cuberevo_mini2, cuberevo_250hd, cuberevo_2000hd, cuberevo_3000hd, ipbox9900, ipbox99, ipbox55, arivalink200, tf7700, hl101
 	[case "${withval}" in
 		hd1|hd2)
 			if test "$BOXTYPE" = "coolstream"; then
@@ -363,6 +364,76 @@
 				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
 			fi
 			;;
+		ufs*)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		atevio7500)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		fortis_hdbox)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		octagon1008)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		hs7*)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		cuberevo*)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		ipbox*)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		arivalink*)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		tf7700)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
+		hl101)
+			if test "$BOXTYPE" = "duckbox"; then
+				BOXMODEL="$withval"
+			else
+				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
+			fi
+			;;
 		*)
 			AC_MSG_ERROR([unsupported value $withval for --with-boxmodel])
 			;;
@@ -383,6 +454,33 @@
 AM_CONDITIONAL(BOXMODEL_CS_HD2,test "$BOXMODEL" = "hd2")
 
 AM_CONDITIONAL(BOXMODEL_RASPI,test "$BOXMODEL" = "raspi")
+
+AM_CONDITIONAL(BOXTYPE_UFS910, test "$BOXTYPE" = "ufs910")
+AM_CONDITIONAL(BOXTYPE_UFS912, test "$BOXTYPE" = "ufs912")
+AM_CONDITIONAL(BOXTYPE_UFS913, test "$BOXTYPE" = "ufs913")
+AM_CONDITIONAL(BOXTYPE_UFS922, test "$BOXTYPE" = "ufs922")
+AM_CONDITIONAL(BOXTYPE_ATEVIO7500, test "$BOXTYPE" = "atevio7500")
+AM_CONDITIONAL(BOXTYPE_FORTIS_HDBOX, test "$BOXTYPE" = "fortis_hdbox")
+AM_CONDITIONAL(BOXTYPE_OCTAGON1008, test "$BOXTYPE" = "octagon1008")
+AM_CONDITIONAL(BOXTYPE_HS7110, test "$BOXTYPE" = "hs7110")
+AM_CONDITIONAL(BOXTYPE_HS7119, test "$BOXTYPE" = "hs7119")
+AM_CONDITIONAL(BOXTYPE_HS7420, test "$BOXTYPE" = "hs7420")
+AM_CONDITIONAL(BOXTYPE_HS7429, test "$BOXTYPE" = "hs7429")
+AM_CONDITIONAL(BOXTYPE_HS7810a, test "$BOXTYPE" = "hs7810a")
+AM_CONDITIONAL(BOXTYPE_HS7819, test "$BOXTYPE" = "hs7819")
+AM_CONDITIONAL(BOXTYPE_CUBEREVO, test "$BOXTYPE" = "cuberevo")
+AM_CONDITIONAL(BOXTYPE_CUBEREVO_MINI, test "$BOXTYPE" = "cuberevo_mini")
+AM_CONDITIONAL(BOXTYPE_CUBEREVO_MINI2, test "$BOXTYPE" = "cuberevo_mini2")
+AM_CONDITIONAL(BOXTYPE_CUBEREVO_250HD, test "$BOXTYPE" = "cuberevo_250hd")
+AM_CONDITIONAL(BOXTYPE_CUBEREVO_2000HD, test "$BOXTYPE" = "cuberevo_2000hd")
+AM_CONDITIONAL(BOXTYPE_CUBEREVO_3000HD, test "$BOXTYPE" = "cuberevo_3000hd")
+AM_CONDITIONAL(BOXTYPE_IPBOX, test "$BOXTYPE" = "ipbox")
+AM_CONDITIONAL(BOXTYPE_IPBOX_9900, test "$BOXTYPE" = "ipbox_9900")
+AM_CONDITIONAL(BOXTYPE_IPBOX_99, test "$BOXTYPE" = "ipbox_99")
+AM_CONDITIONAL(BOXTYPE_IPBOX_55, test "$BOXTYPE" = "ipbox_55")
+AM_CONDITIONAL(BOXTYPE_ARRIVALINK200, test "$BOXTYPE" = "arivalink200")
+AM_CONDITIONAL(BOXTYPE_TF7700, test "$BOXTYPE" = "tf7700")
+AM_CONDITIONAL(BOXTYPE_HL101, test "$BOXTYPE" = "hl101")
 
 if test "$BOXTYPE" = "azbox"; then
 	AC_DEFINE(HAVE_AZBOX_HARDWARE, 1, [building for an azbox])
@@ -394,8 +492,8 @@
 	AC_DEFINE(HAVE_SPARK_HARDWARE, 1, [building for a goldenmedia 990 or edision pingulux])
 elif test "$BOXTYPE" = "generic"; then
 	AC_DEFINE(HAVE_GENERIC_HARDWARE, 1, [building for a generic device like a standard PC])
-elif test "$BOXTYPE" = "armbox"; then
-	AC_DEFINE(HAVE_ARM_HARDWARE, 1, [building for an armbox])
+elif test "$BOXTYPE" = "duckbox"; then
+	AC_DEFINE(HAVE_DUCKBOX_HARDWARE, 1, [building for a duckbox])
 fi
 
 # TODO: do we need more defines?
@@ -408,6 +506,58 @@
 	AC_DEFINE(ENABLE_CHANGE_OSD_RESOLUTION,1,[enable change the osd resolution])
 elif test "$BOXMODEL" = "raspi"; then
 	AC_DEFINE(BOXMODEL_RASPI, 1, [Raspberry pi])
+elif test "$BOXMODEL" = "ufs910"; then
+	AC_DEFINE(BOXMODEL_UFS910, 1, [ufs910])
+elif test "$BOXMODEL" = "ufs912"; then
+	AC_DEFINE(BOXMODEL_UFS912, 1, [ufs912])
+elif test "$BOXMODEL" = "ufs913"; then
+	AC_DEFINE(BOXMODEL_UFS913, 1, [ufs913])
+elif test "$BOXMODEL" = "ufs922"; then
+	AC_DEFINE(BOXMODEL_UFS922, 1, [ufs922])
+elif test "$BOXMODEL" = "atevio7500"; then
+	AC_DEFINE(BOXMODEL_ATEVIO7500, 1, [atevio7500])
+elif test "$BOXMODEL" = "fortis_hdbox"; then
+	AC_DEFINE(BOXMODEL_FORTIS_HDBOX, 1, [fortis_hdbox])
+elif test "$BOXMODEL" = "octagon1008"; then
+	AC_DEFINE(BOXMODEL_UFS910, 1, [octagon1008])
+elif test "$BOXMODEL" = "hs7110"; then
+	AC_DEFINE(BOXMODEL_HS7110, 1, [hs7110])
+elif test "$BOXMODEL" = "hs7119"; then
+	AC_DEFINE(BOXMODEL_HS7119, 1, [hs7119])
+elif test "$BOXMODEL" = "hs7420"; then
+	AC_DEFINE(BOXMODEL_HS7420, 1, [hs7420])
+elif test "$BOXMODEL" = "hs7429"; then
+	AC_DEFINE(BOXMODEL_HS7429, 1, [hs7429])
+elif test "$BOXMODEL" = "hs7810a"; then
+	AC_DEFINE(BOXMODEL_HS7810A, 1, [hs7810a])
+elif test "$BOXMODEL" = "hs7819"; then
+	AC_DEFINE(BOXMODEL_HS7819, 1, [hs7819])
+elif test "$BOXMODEL" = "cuberevo"; then
+	AC_DEFINE(BOXMODEL_CUBEREVO, 1, [cuberevo])
+elif test "$BOXMODEL" = "cuberevo_mini"; then
+	AC_DEFINE(BOXMODEL_CUBEREVO_MINI, 1, [cuberevo_mini])
+elif test "$BOXMODEL" = "cuberevo_mini2"; then
+	AC_DEFINE(BOXMODEL_CUBEREVO_MINI2, 1, [cuberevo_mini2])
+elif test "$BOXMODEL" = "cuberevo_250hd"; then
+	AC_DEFINE(BOXMODEL_CUBEREVO_HD250, 1, [cuberevo_250hd])
+elif test "$BOXMODEL" = "cuberevo_2000hd"; then
+	AC_DEFINE(BOXMODEL_CUBEREVO_2000HD, 1, [cuberevo_2000hd])
+elif test "$BOXMODEL" = "cuberevo_3000hd"; then
+	AC_DEFINE(BOXMODEL_CUBEREVO_3000HD, 1, [cuberevo_3000hd])
+elif test "$BOXMODEL" = "ipbox"; then
+	AC_DEFINE(BOXMODEL_IPBOX, 1, [ipbox])
+elif test "$BOXMODEL" = "ipbox_9900"; then
+	AC_DEFINE(BOXMODEL_IPBOX_9900, 1, [ipbox_9900])
+elif test "$BOXMODEL" = "ipbox_99"; then
+	AC_DEFINE(BOXMODEL_IPBOX_99, 1, [ipbox_99])
+elif test "$BOXMODEL" = "ipbox_55"; then
+	AC_DEFINE(BOXMODEL_IPBOX_55, 1, [ipbox_55])
+elif test "$BOXMODEL" = "arrivalink200"; then
+	AC_DEFINE(BOXMODEL_ARRIVALINK200, 1, [arrivalink200])
+elif test "$BOXMODEL" = "tf7700"; then
+	AC_DEFINE(BOXMODEL_TF7700, 1, [tf7700])
+elif test "$BOXMODEL" = "hl101"; then
+	AC_DEFINE(BOXMODEL_HL101, 1, [hl101])
 fi
 ])
 
--- neutrino-mp-cst-next_ni.org/src/driver/simple_display.cpp
+++ neutrino-mp-cst-next_ni/src/driver/simple_display.cpp
@@ -39,6 +39,9 @@
 #include <sys/stat.h>
 
 #if HAVE_SPARK_HARDWARE
+struct semaphore {
+	int dummy;
+};
 #include <aotom_main.h>
 #define DISPLAY_DEV "/dev/vfd"
 #include <zapit/zapit.h>
--- neutrino-mp-cst-next_ni.org/src/driver/vfd.cpp
+++ neutrino-mp-cst-next_ni/src/driver/vfd.cpp
@@ -45,6 +45,16 @@
 #include <zapit/debug.h>
 
 #include <cs_api.h>
+#include <stropts.h>
+#define VFD_DEVICE "/dev/vfd"
+#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_HS7420) || defined (BOXMODEL_HS7429) || defined (BOXMODEL_TF7700)
+#define VFDLENGTH 8
+#elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+#define VFDLENGTH 12
+#else
+define VFDLENGTH 16
+#endif
+
 extern CRemoteControl * g_RemoteControl; /* neutrino.cpp */
 
 CVFD::CVFD()
@@ -72,27 +82,38 @@
 	}
 
 #ifdef BOXMODEL_CS_HD2
-	if (fd >= 0) {
+	if (fd >= 0)
+	{
 		int ret = ioctl(fd, IOC_FP_GET_DISPLAY_CAPS, &caps);
-		if (ret < 0) {
+		if (ret < 0)
+		{
 			perror("IOC_FP_GET_DISPLAY_CAPS");
 			printf("VFD: please update driver!\n");
 			support_text	= true;
 			support_numbers	= true;
-		} else {
-			switch (caps.display_type) {
-			case FP_DISPLAY_TYPE_NONE:
-				has_lcd		= false;
-				has_led_segment	= false;
-				break;
-			case FP_DISPLAY_TYPE_LED_SEGMENT:
-				has_lcd		= false;
-				has_led_segment	= true;
-				break;
-			default:
-				has_lcd		= true;
-				has_led_segment	= false;
-				break;
+		}
+		else
+		{
+			switch (caps.display_type)
+			{
+				case FP_DISPLAY_TYPE_NONE:
+				{
+					has_lcd		= false;
+					has_led_segment	= false;
+					break;
+				}
+				case FP_DISPLAY_TYPE_LED_SEGMENT:
+				{
+					has_lcd		= false;
+					has_led_segment	= true;
+					break;
+				}
+				default:
+				{
+					has_lcd		= true;
+					has_led_segment	= false;
+					break;
+				}
 			}
 			support_text    = (caps.display_type != FP_DISPLAY_TYPE_LED_SEGMENT &&
 				           caps.text_support != FP_DISPLAY_TEXT_NONE);
@@ -114,7 +135,8 @@
 
 CVFD::~CVFD()
 {
-	if(fd > 0){
+	if(fd > 0)
+	{
 		close(fd);
 		fd = -1;
 	}
@@ -123,62 +145,83 @@
 CVFD* CVFD::getInstance()
 {
 	static CVFD* lcdd = NULL;
-	if(lcdd == NULL) {
+	if(lcdd == NULL)
+	{
 		lcdd = new CVFD();
 	}
 	return lcdd;
 }
 
-void CVFD::count_down() {
-	if (timeout_cnt > 0) {
+void CVFD::count_down()
+{
+	if (timeout_cnt > 0)
+	{
 		timeout_cnt--;
-		if (timeout_cnt == 0 ) {
-			if (g_settings.lcd_setting_dim_brightness > -1) {
+		if (timeout_cnt == 0 )
+		{
+			if (g_settings.lcd_setting_dim_brightness > -1)
+			{
 				// save lcd brightness, setBrightness() changes global setting
 				int b = g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS];
 				setBrightness(g_settings.lcd_setting_dim_brightness);
 				g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] = b;
-			} else {
+			}
+			else
+			{
 				setPower(0);
 			}
 		}
 	}
-	if (g_settings.lcd_info_line && switch_name_time_cnt > 0) {
-	  switch_name_time_cnt--;
-		if (switch_name_time_cnt == 0) {
-			if (g_settings.lcd_setting_dim_brightness > -1) {
+	if (g_settings.lcd_info_line && switch_name_time_cnt > 0)
+	{
+		switch_name_time_cnt--;
+		if (switch_name_time_cnt == 0)
+		{
+			if (g_settings.lcd_setting_dim_brightness > -1)
+			{
 				CVFD::getInstance()->showTime(true);
 			}
 		}
 	}
 }
 
-void CVFD::wake_up() {
-	if(fd < 0) return;
-
-	if (atoi(g_settings.lcd_setting_dim_time.c_str()) > 0) {
+void CVFD::wake_up()
+{
+	if(fd < 0)
+	{
+		return;
+	}
+	if (atoi(g_settings.lcd_setting_dim_time.c_str()) > 0)
+	{
 		timeout_cnt = atoi(g_settings.lcd_setting_dim_time.c_str());
 		g_settings.lcd_setting_dim_brightness > -1 ?
 			setBrightness(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS]) : setPower(1);
 	}
 	else
+	{
 		setPower(1);
-	if(g_settings.lcd_info_line){
+	}
+	if(g_settings.lcd_info_line)
+	{
 		switch_name_time_cnt = g_settings.timing[SNeutrinoSettings::TIMING_INFOBAR] + 10;
 	}
-
 }
 
 void* CVFD::TimeThread(void *)
 {
-	while(1) {
+	while(1)
+	{
 		sleep(1);
 		struct stat buf;
-                if (stat("/tmp/vfd.locked", &buf) == -1) {
+                if (stat("/tmp/vfd.locked", &buf) == -1)
+		{
                         CVFD::getInstance()->showTime();
                         CVFD::getInstance()->count_down();
-                } else
-                        CVFD::getInstance()->wake_up();
+                }
+		else
+                {
+		        CVFD::getInstance()->wake_up();
+		}
 	}
 	return NULL;
 }
@@ -190,7 +233,8 @@
 	brightness = -1;
 	setMode(MODE_TVRADIO);
 
-	if (pthread_create (&thrTime, NULL, TimeThread, NULL) != 0 ) {
+	if (pthread_create (&thrTime, NULL, TimeThread, NULL) != 0 )
+	{
 		perror("[lcdd]: pthread_create(TimeThread)");
 		return ;
 	}
@@ -198,25 +242,34 @@
 
 void CVFD::setlcdparameter(int dimm, const int power)
 {
-	if(fd < 0) return;
-
-	if(dimm < 0)
+	if (fd < 0)
+	{
+		return;
+	}
+	if (dimm < 0)
+	{
 		dimm = 0;
-	else if(dimm > 15)
-		dimm = 15;
-
+	}
+	else if (dimm > 15)
+	{
+			dimm = 15;
+	}
 	if(!power)
+	{
 		dimm = 0;
-
+	}
 	if(brightness == dimm)
-		return;
-
+	{
+		return;
+	}
 	brightness = dimm;
 
 printf("CVFD::setlcdparameter dimm %d power %d\n", dimm, power);
 	int ret = ioctl(fd, IOC_FP_SET_BRIGHT, dimm);
-	if(ret < 0)
+	if (ret < 0)
+	{
 		perror("IOC_FP_SET_BRIGHT");
+	}
 }
 
 void CVFD::setlcdparameter(void)
@@ -231,115 +284,169 @@
 {
 	int ret = -1;
 
-	if(led1 != -1){
+	if (led1 != -1)
+	{
 		ret = ioctl(fd, IOC_FP_LED_CTRL, led1);
-		if(ret < 0)
+		if (ret < 0)
+		{
 			perror("IOC_FP_LED_CTRL");
-	}
-	if(led2 != -1){
+		}
+	}
+	if (led2 != -1)
+	{
 		ret = ioctl(fd, IOC_FP_LED_CTRL, led2);
 		if(ret < 0)
+		{
 			perror("IOC_FP_LED_CTRL");
+		}
 	}
 }
 
 void CVFD::setBacklight(bool on_off)
 {
 	if(cs_get_revision() != 9)
-		return;
-
+	{
+		return;
+	}
 	int led = on_off ? FP_LED_3_ON : FP_LED_3_OFF;
 	if (ioctl(fd, IOC_FP_LED_CTRL, led) < 0)
+	{
 		perror("FP_LED_3");
+	}
 }
 
 void CVFD::setled(bool on_off)
 {
 	if(g_settings.led_rec_mode == 0)
-		return;
-
+	{
+		return;
+	}
 	int led1 = -1, led2 = -1;
 	if(on_off){//on
-		switch(g_settings.led_rec_mode) {
+	{
+		switch(g_settings.led_rec_mode)
+		{
 			case 1:
+			{
 				led1 = FP_LED_1_ON; led2 = FP_LED_2_ON;
 				break;
+			}
 			case 2:
+			{
 				led1 = FP_LED_1_ON;
 				break;
+			}
 			case 3:
+			{
 				led2 = FP_LED_2_ON;
 				break;
+			{
 			default:
+			{
 				break;
+			}
 	      }
 	}
-	else {//off
-		switch(g_settings.led_rec_mode) {
+	else
+	{//off
+		switch(g_settings.led_rec_mode)
+		{
 			case 1:
+			{
 				led1 = FP_LED_1_OFF; led2 = FP_LED_2_OFF;
 				break;
+			}
 			case 2:
+			{
 				led1 = FP_LED_1_OFF;
 				break;
+			}
 			case 3:
+			{
 				led2 = FP_LED_2_OFF;
 				break;
+			}
 			default:
+			{
 				led1 = FP_LED_1_OFF; led2 = FP_LED_2_OFF;
 				break;
+			}
 	      }
 	}
-
 	setled(led1, led2);
 }
 
 void CVFD::setled(void)
 {
-	if(fd < 0) return;
-
+	if (fd < 0)
+	{
+		return;
+	}
 	int led1 = -1, led2 = -1;
 	int select = 0;
 
-	if(mode == MODE_MENU_UTF8 || mode == MODE_TVRADIO  )
-		  select = g_settings.led_tv_mode;
-	else if(mode == MODE_STANDBY)
-		  select = g_settings.led_standby_mode;
-
-	switch(select){
+	if (mode == MODE_MENU_UTF8 || mode == MODE_TVRADIO)
+	{
+		select = g_settings.led_tv_mode;
+	}
+	else if (mode == MODE_STANDBY)
+	{
+		select = g_settings.led_standby_mode;
+	}
+	switch(select)
+	{
 		case 0:
+		{
 			led1 = FP_LED_1_OFF; led2 = FP_LED_2_OFF;
 			break;
+		}
 		case 1:
+		{
 			led1 = FP_LED_1_ON; led2 = FP_LED_2_ON;
 			break;
+		}
 		case 2:
+		{
 			led1 = FP_LED_1_ON; led2 = FP_LED_2_OFF;
 			break;
+		}
 		case 3:
+		{
 			led1 = FP_LED_1_OFF; led2 = FP_LED_2_ON;
 			break;
+		}
 		default:
-			break;
+		{
+			break;
+		}
 	}
 	setled(led1, led2);
 }
 
 void CVFD::showServicename(const std::string & name, int number) // UTF-8
 {
-	if(fd < 0) return;
-
-printf("CVFD::showServicename: %s\n", name.c_str());
+	if (fd < 0)
+	{
+		return;
+	}
 	servicename = name;
 	service_number = number;
 
 	if (mode != MODE_TVRADIO)
-		return;
-
-	if (support_text)
+	{
+		return;
+	}
+printf("CVFD::showServicename: %s\n", name.c_str());
+	if ((support_text) && VFDLENGTH > 7)
+	{
+		printf("CVFD::showServicename: [%s]\n", name.c_str());
 		ShowText(name.c_str());
+	}
 	else
+	{
+		printf("CVFD::showServicename: [%d]\n", service_number);
 		ShowNumber(service_number);
+	}
 	wake_up();
 }
 
@@ -349,14 +456,19 @@
 	static int recstatus = 0;
 #if 0
 	if(!has_lcd)
-		return;
+	{
+		return;
+	}
 #endif
-	if(fd >= 0 && mode == MODE_SHUTDOWN) {
+	if(fd >= 0 && mode == MODE_SHUTDOWN)
+	{
 		ShowIcon(FP_ICON_CAM1, false);
 		return;
 	}
-	if (fd >= 0 && showclock) {
-		if (mode == MODE_STANDBY || ( g_settings.lcd_info_line && (MODE_TVRADIO == mode))) {
+	if (fd >= 0 && showclock)
+	{
+		if (mode == MODE_STANDBY || ( g_settings.lcd_info_line && (MODE_TVRADIO == mode)))
+		{
 			char timestr[21];
 			struct timeb tm;
 			struct tm * t;
@@ -364,13 +476,17 @@
 
 			ftime(&tm);
 			t = localtime(&tm.time);
-			if(force || ( switch_name_time_cnt == 0 && ((hour != t->tm_hour) || (minute != t->tm_min))) ) {
+			if(force || ( switch_name_time_cnt == 0 && ((hour != t->tm_hour) || (minute != t->tm_min))) )
+			{
 				hour = t->tm_hour;
 				minute = t->tm_min;
-				if (support_text) {
+				if (support_text)
+				{
 					strftime(timestr, 20, "%H:%M", t);
 					ShowText(timestr);
-				} else if (support_numbers && has_led_segment) {
+				}
+				else if (support_numbers && has_led_segment)
+				{
 					ShowNumber((t->tm_hour*100) + t->tm_min);
 #ifdef BOXMODEL_CS_HD2
 					ioctl(fd, IOC_FP_SET_COLON, 0x01);
@@ -379,28 +495,37 @@
 			}
 		}
 	}
-
 	int tmp_recstatus = CNeutrinoApp::getInstance()->recordingstatus;
-	if (tmp_recstatus) {
-		if(clearClock) {
+	if (tmp_recstatus)
+	{
+		if (clearClock)
+		{
 			clearClock = 0;
 			if(has_lcd)
+			{
 				ShowIcon(FP_ICON_CAM1, false);
+			}
 			setled(false);//off
-		} else {
+		}
+		else
+		{
 			clearClock = 1;
 			if(has_lcd)
+			{
 				ShowIcon(FP_ICON_CAM1, true);
+			}
 			setled(true);//on
 		}
-	} else if(clearClock || (recstatus != tmp_recstatus)) { // in case icon ON after record stopped
+	}
+	else if(clearClock || (recstatus != tmp_recstatus))
+	{ // in case icon ON after record stopped
 		clearClock = 0;
-		if(has_lcd)
+		if (has_lcd)
+		{
 			ShowIcon(FP_ICON_CAM1, false);
-
+		}
 		setled();
 	}
-
 	recstatus = tmp_recstatus;
 }
 
@@ -421,36 +546,48 @@
 void CVFD::showVolume(const char vol, const bool force_update)
 {
 	static int oldpp = 0;
-	if(!has_lcd) return;
-
+	if (!has_lcd)
+	{
+		return;
+	}
 	ShowIcon(FP_ICON_MUTE, muted);
 
-	if(!force_update && vol == volume)
-		return;
+	if (!force_update && vol == volume)
+	{
+		return;
+	}
 	volume = vol;
 
 	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME] == 2 /* off */)
-		return;
-
+	{
+		return;
+	}
 	bool allowed_mode = (mode == MODE_TVRADIO || mode == MODE_AUDIO || mode == MODE_MENU_UTF8);
 	if (!allowed_mode)
-		return;
-
-	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME] == 1) {
+	{
+		return;
+	}
+	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME] == 1)
+	{
 		wake_up();
 		ShowIcon(FP_ICON_FRAME, true);
 		int pp = (vol * 8 + 50) / 100;
-		if(pp > 8) pp = 8;
-
-		if(force_update || oldpp != pp) {
+		if(pp > 8)
+		{
+			pp = 8;
+		}
+		if(force_update || oldpp != pp)
+		{
 printf("CVFD::showVolume: %d, bar %d\n", (int) vol, pp);
 			int i;
 			int j = 0x00000200;
-			for(i = 0; i < pp; i++) {
+			for (i = 0; i < pp; i++)
+			{
 				ShowIcon((fp_icon) j, true);
 				j /= 2;
 			}
-			for(;i < 8; i++) {
+			for (;i < 8; i++)
+			{
 				ShowIcon((fp_icon) j, false);
 				j /= 2;
 			}
@@ -463,38 +600,54 @@
 {
 
 	static int ppold = 0;
-	if(!has_lcd) return;
-
+	if(!has_lcd)
+	{
+		return;
+	}
 	percentOver = perc;
 
-	if (mode == MODE_AUDIO && origin != MODE_AUDIO) // exclusive access for audio mode
-		return;
-
+	if (mode == MODE_AUDIO && origin != MODE_AUDIO)
+	{
+		// exclusive access for audio mode
+		return;
+	}
 	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME] == 2 /* off */)
-		return;
-
+	{
+		return;
+	}
 	bool allowed_mode = (mode == MODE_TVRADIO || mode == MODE_AUDIO || mode == MODE_MENU_UTF8);
 	if (!allowed_mode)
-		return;
-
-	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME] == 0) {
+	{
+		return;
+	}
+	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME] == 0)
+	{
 		ShowIcon(FP_ICON_FRAME, true);
 		int pp;
 		if(perc == 255)
+		{
 			pp = 0;
+		}
 		else
+		{
 			pp = (perc * 8 + 50) / 100;
-		if(pp > 8) pp = 8;
-
-		if(pp != ppold) {
+		}
+		if(pp > 8)
+		{
+			pp = 8;
+		}
+		if(pp != ppold)
+		{
 //printf("CVFD::showPercentOver: %d, bar %d\n", (int) perc, pp);
 			int i;
 			int j = 0x00000200;
-			for(i = 0; i < pp; i++) {
+			for (i = 0; i < pp; i++)
+			{
 				ShowIcon((fp_icon) j, true);
 				j /= 2;
 			}
-			for(;i < 8; i++) {
+			for (;i < 8; i++)
+			{
 				ShowIcon((fp_icon) j, false);
 				j /= 2;
 			}
@@ -507,17 +660,23 @@
 {
 	if(fd < 0) return;
 	if (mode != MODE_MENU_UTF8)
-		return;
-
+	{
+		return;
+	}
 	ShowText(ptext);
 	wake_up();
 }
 
 void CVFD::showAudioTrack(const std::string & /*artist*/, const std::string & title, const std::string & /*album*/)
 {
-	if(fd < 0) return;
+	if(fd < 0)
+	{
+		return;
+	}
 	if (mode != MODE_AUDIO)
-		return;
+	{
+		return;
+	}
 printf("CVFD::showAudioTrack: %s\n", title.c_str());
 	ShowText(title.c_str());
 	wake_up();
@@ -531,137 +690,191 @@
 
 void CVFD::showAudioPlayMode(AUDIOMODES m)
 {
-	if(fd < 0) return;
+	if (fd < 0)
+	{
+		return;
+	}
 	if (mode != MODE_AUDIO)
-		return;
-
-	switch(m) {
+	{
+		return;
+	}
+	switch(m)
+	{
 		case AUDIO_MODE_PLAY:
+		{
 			ShowIcon(FP_ICON_PLAY, true);
 			ShowIcon(FP_ICON_PAUSE, false);
 			break;
+		}
 		case AUDIO_MODE_STOP:
+		{
 			ShowIcon(FP_ICON_PLAY, false);
 			ShowIcon(FP_ICON_PAUSE, false);
 			break;
+		}
 		case AUDIO_MODE_PAUSE:
+		{
 			ShowIcon(FP_ICON_PLAY, false);
 			ShowIcon(FP_ICON_PAUSE, true);
 			break;
+		}
 		case AUDIO_MODE_FF:
-			break;
+		{
+			break;
+		}
 		case AUDIO_MODE_REV:
-			break;
+		{
+			break;
+		}
 	}
 	wake_up();
 }
 
 void CVFD::showAudioProgress(const unsigned char perc)
 {
-	if(fd < 0) return;
+	if (fd < 0)
+	{
+		return;
+	}
 	if (mode != MODE_AUDIO)
-		return;
-
+	{
+		return;
+	}
 	showPercentOver(perc, true, MODE_AUDIO);
 }
 
 void CVFD::setMode(const MODES m, const char * const title)
 {
-	if(fd < 0) return;
-
+	if (fd < 0)
+	{
+		return;
+	}
 	// Clear colon in display if it is still there
 #ifdef BOXMODEL_CS_HD2
 	if (support_numbers && has_led_segment)
+	{
 		ioctl(fd, IOC_FP_SET_COLON, 0x00);
+	}
 #endif
-
 	if(mode == MODE_AUDIO)
+	{
 		ShowIcon(FP_ICON_MP3, false);
+	}
 #if 0
-	else if(mode == MODE_STANDBY) {
+	else if(mode == MODE_STANDBY)
+	{
 		ShowIcon(FP_ICON_COL1, false);
 		ShowIcon(FP_ICON_COL2, false);
 	}
 #endif
 
 	if(strlen(title))
+	{
 		ShowText(title);
+	}
 	mode = m;
 	setlcdparameter();
 
-	switch (m) {
-	case MODE_TVRADIO:
-		switch (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME])
-		{
-		case 0:
-			showPercentOver(percentOver, false);
-			break;
-		case 1:
+	switch (m)
+	{
+		case MODE_TVRADIO:
+		{
+			switch (g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME])
+			{
+				case 0:
+				{
+					showPercentOver(percentOver, false);
+					break;
+				}
+				case 1:
+				{
+					showVolume(volume, false);
+					break;
+				}
+#if 0
+				case 2:
+				{
+					showVolume(volume, false);
+					showPercentOver(percentOver, false);
+					break;
+				}
+#endif
+			}
+			showServicename(servicename);
+			showclock = true;
+			if(g_settings.lcd_info_line)
+			{
+				switch_name_time_cnt = g_settings.timing[SNeutrinoSettings::TIMING_INFOBAR] + 10;
+			}
+			break;
+		}
+		case MODE_AUDIO:
+		{
+			ShowIcon(FP_ICON_MP3, true);
+			showAudioPlayMode(AUDIO_MODE_STOP);
 			showVolume(volume, false);
-			break;
+			showclock = true;
+			//showTime();      /* "showclock = true;" implies that "showTime();" does a "displayUpdate();" */
+			break;
+		}
+		case MODE_SCART:
+		{
+			showVolume(volume, false);
+			showclock = true;
+			//showTime();      /* "showclock = true;" implies that "showTime();" does a "displayUpdate();" */
+			break;
+		}
+		case MODE_MENU_UTF8:
+		{
+			showclock = false;
+			//fonts.menutitle->RenderString(0,28, 140, title, CLCDDisplay::PIXEL_ON);
+			break;
+		}
+		case MODE_SHUTDOWN:
+		{
+			showclock = false;
+			Clear();
+			break;
+		}
+		case MODE_STANDBY:
+		{
 #if 0
-		case 2:
-			showVolume(volume, false);
-			showPercentOver(percentOver, false);
-			break;
+			ShowIcon(FP_ICON_COL1, true);
+			ShowIcon(FP_ICON_COL2, true);
 #endif
-		}
-		showServicename(servicename);
-		showclock = true;
-		if(g_settings.lcd_info_line)
-			switch_name_time_cnt = g_settings.timing[SNeutrinoSettings::TIMING_INFOBAR] + 10;
-		break;
-	case MODE_AUDIO:
-	{
-		ShowIcon(FP_ICON_MP3, true);
-		showAudioPlayMode(AUDIO_MODE_STOP);
-		showVolume(volume, false);
-		showclock = true;
-		//showTime();      /* "showclock = true;" implies that "showTime();" does a "displayUpdate();" */
-		break;
-	}
-	case MODE_SCART:
-		showVolume(volume, false);
-		showclock = true;
-		//showTime();      /* "showclock = true;" implies that "showTime();" does a "displayUpdate();" */
-		break;
-	case MODE_MENU_UTF8:
-		showclock = false;
-		//fonts.menutitle->RenderString(0,28, 140, title, CLCDDisplay::PIXEL_ON);
-		break;
-	case MODE_SHUTDOWN:
-		showclock = false;
-		Clear();
-		break;
-	case MODE_STANDBY:
-#if 0
-		ShowIcon(FP_ICON_COL1, true);
-		ShowIcon(FP_ICON_COL2, true);
-#endif
-		showclock = true;
-		showTime(true);      /* "showclock = true;" implies that "showTime();" does a "displayUpdate();" */
-		                 /* "showTime()" clears the whole lcd in MODE_STANDBY                         */
-		break;
+			showclock = true;
+			showTime(true);      /* "showclock = true;" implies that "showTime();" does a "displayUpdate();" */
+				             /* "showTime()" clears the whole lcd in MODE_STANDBY                         */
+			break;
+		}
 #ifdef VFD_UPDATE
-        case MODE_FILEBROWSER:
-                showclock = true;
-                display.draw_fill_rect(-1, -1, 120, 64, CLCDDisplay::PIXEL_OFF); // clear lcd
-                showFilelist();
-                break;
-        case MODE_PROGRESSBAR:
-                showclock = false;
-                display.load_screen(&(background[BACKGROUND_SETUP]));
-                showProgressBar();
-                break;
-        case MODE_PROGRESSBAR2:
-                showclock = false;
-                display.load_screen(&(background[BACKGROUND_SETUP]));
-                showProgressBar2();
-                break;
-        case MODE_INFOBOX:
-                showclock = false;
-                showInfoBox();
-                break;
+	        case MODE_FILEBROWSER:
+		{
+	                showclock = true;
+	                display.draw_fill_rect(-1, -1, 120, 64, CLCDDisplay::PIXEL_OFF); // clear lcd
+	                showFilelist();
+	                break;
+		}
+	        case MODE_PROGRESSBAR:
+		{
+	                showclock = false;
+	                display.load_screen(&(background[BACKGROUND_SETUP]));
+	                showProgressBar();
+	                break;
+		}
+	        case MODE_PROGRESSBAR2:
+        	{
+		        showclock = false;
+	                display.load_screen(&(background[BACKGROUND_SETUP]));
+	                showProgressBar2();
+	                break;
+		}
+	        case MODE_INFOBOX:
+        	{
+		        showclock = false;
+	                showInfoBox();
+	                break;
+		}
 #endif // VFD_UPDATE
 	}
 	wake_up();
@@ -670,8 +883,10 @@
 
 void CVFD::setBrightness(int bright)
 {
-	if(!has_lcd && !has_led_segment) return;
-
+	if (!has_lcd && !has_led_segment)
+	{
+		return;
+	}
 	g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] = bright;
 	setlcdparameter();
 }
@@ -679,16 +894,19 @@
 int CVFD::getBrightness()
 {
 	//FIXME for old neutrino.conf
-	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] > 15)
+	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] > 15)
+	{
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] = 15;
-
+	}
 	return g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS];
 }
 
 void CVFD::setBrightnessStandby(int bright)
 {
-	if(!has_lcd && !has_led_segment) return;
-
+	if (!has_lcd && !has_led_segment)
+	{
+		return;
+	}
 	g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] = bright;
 	setlcdparameter();
 }
@@ -696,15 +914,19 @@
 int CVFD::getBrightnessStandby()
 {
 	//FIXME for old neutrino.conf
-	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] > 15)
+	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] > 15)
+	{
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] = 15;
+	}
 	return g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS];
 }
 
 void CVFD::setBrightnessDeepStandby(int bright)
 {
-	if(!has_lcd && !has_led_segment) return;
-
+	if (!has_lcd && !has_led_segment)
+	{
+		return;
+	}
 	g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] = bright;
 	setlcdparameter();
 }
@@ -712,14 +934,18 @@
 int CVFD::getBrightnessDeepStandby()
 {
 	//FIXME for old neutrino.conf
-	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] > 15)
+	if (g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] > 15)
+	{
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] = 15;
-	return g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS];
+	}	return g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS];
 }
 
 void CVFD::setPower(int /*power*/)
 {
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
 // old
 	//g_settings.lcd_setting[SNeutrinoSettings::LCD_POWER] = power;
 	//setlcdparameter();
@@ -732,8 +958,10 @@
 
 void CVFD::togglePower(void)
 {
-	if(fd < 0) return;
-
+	if (fd < 0)
+	{
+		return;
+	}
 	last_toggle_state_power = 1 - last_toggle_state_power;
 	setlcdparameter((mode == MODE_STANDBY) ? g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] : (mode == MODE_SHUTDOWN) ? g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] : g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS],
 			last_toggle_state_power);
@@ -741,77 +969,108 @@
 
 void CVFD::setMuted(bool mu)
 {
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
 	muted = mu;
 	showVolume(volume);
 }
 
 void CVFD::resume()
 {
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
 }
 
 void CVFD::pause()
 {
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
 }
 
 void CVFD::Lock()
 {
-	if(fd < 0) return;
+	if (fd < 0)
+	{
+		return;
+	}
 	creat("/tmp/vfd.locked", 0);
 }
 
 void CVFD::Unlock()
 {
-	if(fd < 0) return;
+	if (fd < 0)
+	{
+		return;
+	}
 	unlink("/tmp/vfd.locked");
 }
 
 void CVFD::Clear()
 {
-	if(fd < 0) return;
+	if (fd < 0)
+	{
+		return;
+	}
 	int ret = ioctl(fd, IOC_FP_CLEAR_ALL, 0);
-	if(ret < 0)
+	if (ret < 0)
+	{
 		perror("IOC_FP_SET_TEXT");
+	}
 	else
+	{
 		text.clear();
+	}
 }
 
 void CVFD::ShowIcon(fp_icon icon, bool show)
 {
-	if(!has_lcd || fd < 0) return;
+	if (!has_lcd || fd < 0)
+	{
+		return;
+	}
 //printf("CVFD::ShowIcon %s %x\n", show ? "show" : "hide", (int) icon);
 	int ret = ioctl(fd, show ? IOC_FP_SET_ICON : IOC_FP_CLEAR_ICON, icon);
-	if(ret < 0)
+	if (ret < 0)
+	{
 		perror(show ? "IOC_FP_SET_ICON" : "IOC_FP_CLEAR_ICON");
+	}
 }
 
 void CVFD::ShowText(const char * str)
 {
 	if (fd < 0 || !support_text)
-		return;
-
+	{
+		return;
+	}
 	char flags[2] = { FP_FLAG_ALIGN_LEFT, 0 };
-	if (! str) {
+	if (! str)
+	{
 		printf("CVFD::ShowText: str is NULL!\n");
 		return;
 	}
-
 	if (g_settings.lcd_scroll && ((int)strlen(str) > g_info.hw_caps->display_xres))
+	{
 		flags[0] |= FP_FLAG_SCROLL_ON | FP_FLAG_SCROLL_SIO | FP_FLAG_SCROLL_DELAY;
-
+	}
 	std::string txt = std::string(flags) + str;
 	txt = trim(txt);
 	printf("CVFD::ShowText: [0x%02x][%s]\n", flags[0], txt.c_str() + 1);
 
 	size_t len = txt.length();
 	if (txt == text || len > 255)
-		return;
-
+	{
+		return;
+	}
 	text = txt;
 	int ret = ioctl(fd, IOC_FP_SET_TEXT, len > 1 ? txt.c_str() : NULL);
-	if(ret < 0) {
+	if (ret < 0)
+	{
 		support_text = false;
 		perror("IOC_FP_SET_TEXT");
 	}
@@ -820,14 +1079,17 @@
 void CVFD::ShowNumber(int number)
 {
 	if (fd < 0 || (!support_text && !support_numbers))
-		return;
-
+	{
+		return;
+	}
 	if (number < 0)
-		return;
-	
+	{
+		return;
+	}
 #ifdef BOXMODEL_CS_HD2
 	int ret = ioctl(fd, IOC_FP_SET_NUMBER, number);
-	if(ret < 0) {
+	if (ret < 0)
+	{
 		support_numbers = false;
 		perror("IOC_FP_SET_NUMBER");
 	}
@@ -858,20 +1120,29 @@
 void CVFD::showInfoBox(const char * const title, const char * const text ,int autoNewline,int timer)
 {
 #ifdef HAVE_LCD
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
         //printf("[lcdd] Info: \n");
         if(text != NULL)
+	{
                 m_infoBoxText = text;
+	}
         if(text != NULL)
+	{
                 m_infoBoxTitle = title;
+	}
         if(timer != -1)
+	{
                 m_infoBoxTimer = timer;
+	}
         if(autoNewline != -1)
+	{
                 m_infoBoxAutoNewline = autoNewline;
-
+	}
         //printf("[lcdd] Info: %s,%s,%d,%d\n",m_infoBoxTitle.c_str(),m_infoBoxText.c_str(),m_infoBoxAutoNewline,m_infoBoxTimer);
-        if( mode == MODE_INFOBOX &&
-            !m_infoBoxText.empty())
+        if( mode == MODE_INFOBOX && !m_infoBoxText.empty())
         {
                 // paint empty box
                 display.draw_fill_rect (EPG_INFO_WINDOW_POS, EPG_INFO_WINDOW_POS,       LCD_WIDTH-EPG_INFO_WINDOW_POS+1,          LCD_HEIGTH-EPG_INFO_WINDOW_POS+1,    CLCDDisplay::PIXEL_OFF);
@@ -882,9 +1153,11 @@
                 if(!m_infoBoxTitle.empty())
                 {
                         int width = fonts.menu->getRenderWidth(m_infoBoxTitle);
-                        if(width > 100)
+                        if (width > 100)
+			{
                                 width = 100;
-                        int start_pos = (120-width) /2;
+			}
+			int start_pos = (120-width) / 2;
                         display.draw_fill_rect (start_pos, EPG_INFO_WINDOW_POS-4,       start_pos+width+5,        EPG_INFO_WINDOW_POS+10,    CLCDDisplay::PIXEL_OFF);
                         fonts.menu->RenderString(start_pos+4,EPG_INFO_WINDOW_POS+5, width+5, m_infoBoxTitle.c_str(), CLCDDisplay::PIXEL_ON);
                 }
@@ -894,21 +1167,25 @@
                 int line;
                 int pos = 0;
                 int length = m_infoBoxText.size();
-                for(line = 0; line < 5; line++)
+                for (line = 0; line < 5; line++)
                 {
                         text_line.clear();
-                        while ( m_infoBoxText[pos] != '\n' &&
-                                        ((fonts.menu->getRenderWidth(text_line) < EPG_INFO_TEXT_WIDTH-10) || !m_infoBoxAutoNewline )&&
-                                        (pos < length)) // UTF-8
+                        while (m_infoBoxText[pos] != '\n'
+			&&    ((fonts.menu->getRenderWidth(text_line) < EPG_INFO_TEXT_WIDTH-10) || !m_infoBoxAutoNewline )
+			&&    (pos < length)) // UTF-8
                         {
                                 if ( m_infoBoxText[pos] >= ' ' && m_infoBoxText[pos] <= '~' )  // any char between ASCII(32) and ASCII (126)
-                                        text_line += m_infoBoxText[pos];
-                                pos++;
+				{
+					text_line += m_infoBoxText[pos];
+                                }
+				pos++;
                         }
                         //printf("[lcdd] line %d:'%s'\r\n",line,text_line.c_str());
                         fonts.menu->RenderString(EPG_INFO_TEXT_POS+1,EPG_INFO_TEXT_POS+(line*EPG_INFO_FONT_HEIGHT)+EPG_INFO_FONT_HEIGHT+3, EPG_INFO_TEXT_WIDTH, text_line.c_str(), CLCDDisplay::PIXEL_ON);
                         if ( m_infoBoxText[pos] == '\n' )
-                                pos++; // remove new line
+                	{
+		                pos++; // remove new line
+			}
                 }
                 displayUpdate();
         }
@@ -926,37 +1203,47 @@
 void CVFD::showFilelist(int flist_pos,CFileList* flist,const char * const mainDir)
 {
 #ifdef HAVE_LCD
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
         //printf("[lcdd] FileList\n");
-        if(flist != NULL)
-                m_fileList = flist;
-        if(flist_pos != -1)
-                m_fileListPos = flist_pos;
+        if (flist != NULL)
+	{
+		m_fileList = flist;
+	}
+        if (flist_pos != -1)
+	{
+		m_fileListPos = flist_pos;
+	}
         if(mainDir != NULL)
-                m_fileListHeader = mainDir;
-
-        if (mode == MODE_FILEBROWSER &&
-            m_fileList != NULL &&
-            !m_fileList->empty() )
+	{
+		m_fileListHeader = mainDir;
+	}
+        if (mode == MODE_FILEBROWSER
+	&&  m_fileList != NULL
+	&&  !m_fileList->empty() )
         {
-
                 printf("[lcdd] FileList:OK\n");
                 int size = m_fileList->size();
 
                 display.draw_fill_rect(-1, -1, 120, 52, CLCDDisplay::PIXEL_OFF); // clear lcd
 
                 if(m_fileListPos > size)
-                        m_fileListPos = size-1;
-
-                int width = fonts.menu->getRenderWidth(m_fileListHeader);
-                if(width>110)
-                        width=110;
-                fonts.menu->RenderString((120-width)/2, 11, width+5, m_fileListHeader.c_str(), CLCDDisplay::PIXEL_ON);
+		{
+			m_fileListPos = size-1;
+		}
+		int width = fonts.menu->getRenderWidth(m_fileListHeader);
+		if (width>110)
+		{
+			width=110;
+		}
+		fonts.menu->RenderString((120-width)/2, 11, width+5, m_fileListHeader.c_str(), CLCDDisplay::PIXEL_ON);
 
                 //printf("list%d,%d\r\n",m_fileListPos,(*m_fileList)[m_fileListPos].Marked);
                 std::string text;
                 int marked;
-                if(m_fileListPos >  0)
+                if (m_fileListPos >  0)
                 {
                         if ( (*m_fileList)[m_fileListPos-1].Marked == false )
                         {
@@ -971,7 +1258,7 @@
                         text += (*m_fileList)[m_fileListPos-1].getFileName();
                         fonts.menu->RenderString(1, 12+12, BAR_POS_X+5, text.c_str(), marked);
                 }
-                if(m_fileListPos <  size)
+                if (m_fileListPos <  size)
                 {
                         if ((*m_fileList)[m_fileListPos-0].Marked == false )
                         {
@@ -986,7 +1273,7 @@
                         text += (*m_fileList)[m_fileListPos-0].getFileName();
                         fonts.time->RenderString(1, 12+12+14, BAR_POS_X+5, text.c_str(), marked);
                 }
-                if(m_fileListPos <  size-1)
+                if (m_fileListPos <  size-1)
                 {
                         if ((*m_fileList)[m_fileListPos+1].Marked == false )
                         {
@@ -1002,10 +1289,12 @@
                         fonts.menu->RenderString(1, 12+12+14+12, BAR_POS_X+5, text.c_str(), marked);
                 }
                 // paint marker
-                int pages = (((size-1)/3 )+1);
+                int pages = (((size - 1) / 3 ) + 1);
                 int marker_length = (BAR_POS_HEIGTH-2) / pages;
-                if(marker_length <4)
-                        marker_length=4;// not smaller than 4 pixel
+                if (marker_length < 4)
+		{
+			marker_length=4;// not smaller than 4 pixel
+		}
                 int marker_offset = ((BAR_POS_HEIGTH-2-marker_length) * m_fileListPos) /size  ;
                 //printf("%d,%d,%d\r\n",pages,marker_length,marker_offset);
 
@@ -1014,7 +1303,7 @@
                 display.draw_fill_rect (BAR_POS_X+1, BAR_POS_Y+1+marker_offset, BAR_POS_X+BAR_POS_WIDTH-1, BAR_POS_Y+1+marker_offset+marker_length, CLCDDisplay::PIXEL_ON);
 
                 displayUpdate();
-        }
+	}
 #endif
 }
 
@@ -1028,26 +1317,35 @@
 void CVFD::showProgressBar(int global, const char * const text,int show_escape,int timer)
 {
 #ifdef HAVE_LCD
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
         if(text != NULL)
-                m_progressHeaderGlobal = text;
-
+	{
+		m_progressHeaderGlobal = text;
+	}
         if(timer != -1)
-                m_infoBoxTimer = timer;
-
+	{
+		m_infoBoxTimer = timer;
+	}
         if(global >= 0)
         {
                 if(global > 100)
-                        m_progressGlobal =100;
+		{
+			m_progressGlobal =100;
+		}
                 else
-                        m_progressGlobal = global;
+		{
+			m_progressGlobal = global;
+		}
         }
-
-        if(show_escape != -1)
-                m_progressShowEscape = show_escape;
-
-        if (mode == MODE_PROGRESSBAR)
-        {
+	if (show_escape != -1)
+	{
+		m_progressShowEscape = show_escape;
+	}
+	if (mode == MODE_PROGRESSBAR)
+	{
                 //printf("[lcdd] prog:%s,%d,%d\n",m_progressHeaderGlobal.c_str(),m_progressGlobal,m_progressShowEscape);
                 // Clear Display
                 display.draw_fill_rect (0,12,120,64, CLCDDisplay::PIXEL_OFF);
@@ -1055,7 +1353,9 @@
                 // paint progress header
                 int width = fonts.menu->getRenderWidth(m_progressHeaderGlobal);
                 if(width > 100)
+		{
                         width = 100;
+		}
                 int start_pos = (120-width) /2;
                 fonts.menu->RenderString(start_pos, 12+12, width+10, m_progressHeaderGlobal.c_str(), CLCDDisplay::PIXEL_ON);
 
@@ -1066,7 +1366,7 @@
                 display.draw_fill_rect (PROG_GLOB_POS_X+1+marker_length, PROG_GLOB_POS_Y+1, PROG_GLOB_POS_X+PROG_GLOB_POS_WIDTH-1, PROG_GLOB_POS_Y+PROG_GLOB_POS_HEIGTH-1, CLCDDisplay::PIXEL_OFF);
 
                 // paint foot
-                if(m_progressShowEscape  == true)
+                if (m_progressShowEscape  == true)
                 {
                         fonts.menu->RenderString(90, 64, 40, "Home", CLCDDisplay::PIXEL_ON);
                 }
@@ -1091,43 +1391,58 @@
 void CVFD::showProgressBar2(int local,const char * const text_local ,int global ,const char * const text_global ,int show_escape )
 {
 #ifdef HAVE_LCD
-	if(!has_lcd) return;
+	if (!has_lcd)
+	{
+		return;
+	}
         //printf("[lcdd] prog2\n");
         if(text_local != NULL)
+	{
                 m_progressHeaderLocal = text_local;
-
+	}
         if(text_global != NULL)
+	{
                 m_progressHeaderGlobal = text_global;
-
+	}
         if(global >= 0)
         {
                 if(global > 100)
+		{
                         m_progressGlobal =100;
+		}
                 else
+		{
                         m_progressGlobal = global;
+		}
         }
         if(local >= 0)
         {
                 if(local > 100)
+		{
                         m_progressLocal =100;
+		}
                 else
+		{
                         m_progressLocal = local;
+		}
         }
         if(show_escape != -1)
+	{
                 m_progressShowEscape = show_escape;
-
+	}
         if (mode == MODE_PROGRESSBAR2)
         {
-
                 //printf("[lcdd] prog2:%s,%d,%d\n",m_progressHeaderGlobal.c_str(),m_progressGlobal,m_progressShowEscape);
                 // Clear Display
                 display.draw_fill_rect (0,12,120,64, CLCDDisplay::PIXEL_OFF);
 
                 // paint  global header
                 int width = fonts.menu->getRenderWidth(m_progressHeaderGlobal);
-                if(width > 100)
+                if (width > 100)
+		{
                         width = 100;
-                int start_pos = (120-width) /2;
+		}
+		int start_pos = (120 - width) / 2;
                 fonts.menu->RenderString(start_pos, PROG2_GLOB_POS_Y-3, width+10, m_progressHeaderGlobal.c_str(), CLCDDisplay::PIXEL_ON);
 
                 // paint global bar
@@ -1138,8 +1453,10 @@
 
                 // paint  local header
                 width = fonts.menu->getRenderWidth(m_progressHeaderLocal);
-                if(width > 100)
-                        width = 100;
+                if (width > 100)
+		{
+			width = 100;
+		}
                 start_pos = (120-width) /2;
                 fonts.menu->RenderString(start_pos, PROG2_LOCAL_POS_Y + PROG2_LOCAL_POS_HEIGTH +10 , width+10, m_progressHeaderLocal.c_str(), CLCDDisplay::PIXEL_ON);
                 // paint local bar
@@ -1148,7 +1465,7 @@
                 display.draw_fill_rect (PROG2_LOCAL_POS_X,                              PROG2_LOCAL_POS_Y,   PROG2_LOCAL_POS_X+PROG2_LOCAL_POS_WIDTH,   PROG2_LOCAL_POS_Y+PROG2_LOCAL_POS_HEIGTH,   CLCDDisplay::PIXEL_ON);
                 display.draw_fill_rect (PROG2_LOCAL_POS_X+1+marker_length,   PROG2_LOCAL_POS_Y+1, PROG2_LOCAL_POS_X+PROG2_LOCAL_POS_WIDTH-1, PROG2_LOCAL_POS_Y+PROG2_LOCAL_POS_HEIGTH-1, CLCDDisplay::PIXEL_OFF);
                 // paint foot
-                if(m_progressShowEscape  == true)
+                if (m_progressShowEscape  == true)
                 {
                         fonts.menu->RenderString(90, 64, 40, "Home", CLCDDisplay::PIXEL_ON);
                 }
@@ -1159,4 +1476,3 @@
 /*****************************************************************************************/
 #endif // VFD_UPDATE
 
-
--- neutrino-mp-cst-next_ni/src/gui/vfd_setup.cpp
+++ neutrino-mp-cst-next_ni/src/gui/vfd_setup.cpp
@@ -223,6 +223,19 @@
 
 int CVfdSetup::showBrightnessSetup()
 {
+#if defined(BOXMODEL_FORTIS_HDBOX) \
+ || defined(BOXMODEL_OCTAGON1008) \
+ || defined(BOXMODEL_ATEVIO7500) \
+ || defined(BOXMODEL_HS7110) \
+ || defined(BOXMODEL_HS7420) \
+ || defined(BOXMODEL_HS7810A) \
+ || defined(BOXMODEL_HS7119) \
+ || defined(BOXMODEL_HS7429) \
+ || defined(BOXMODEL_HS7819)
+#define MAXBRIGHT 7
+#else
+#define MAXBRIGHT 15
+#endif
 	CMenuOptionNumberChooser * nc;
 	CMenuForwarder * mf;
 
@@ -242,25 +255,24 @@
 	brightnessstandby = CVFD::getInstance()->getBrightnessStandby();
 	brightnessdeepstandby = CVFD::getInstance()->getBrightnessDeepStandby();
 
-	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESS, &brightness, true, 0, 15, this, CRCInput::RC_nokey, NULL, 0, 0, NONEXISTANT_LOCALE, true);
-	nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESS);
+	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESS, &brightness, true, 0, MAXBRIGHT, this, CRCInput::RC_nokey, NULL, 0, 0, NONEXISTANT_LOCALE, true);	nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESS);
 	nc->setActivateObserver(this);
 	mn_widget->addItem(nc);
 
-	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSSTANDBY, &brightnessstandby, true, 0, 15, this, CRCInput::RC_nokey, NULL, 0, 0, NONEXISTANT_LOCALE, true);
+	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSSTANDBY, &brightnessstandby, true, 0, MAXBRIGHT, this, CRCInput::RC_nokey, NULL, 0, 0, NONEXISTANT_LOCALE, true);
 	nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESSSTANDBY);
 	nc->setActivateObserver(this);
 	mn_widget->addItem(nc);
 
 	if (g_info.hw_caps->display_can_deepstandby)
 	{
-		nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSDEEPSTANDBY, &brightnessdeepstandby, true, 0, 15, this, CRCInput::RC_nokey, NULL, 0, 0, NONEXISTANT_LOCALE, true);
+		nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSDEEPSTANDBY, &brightnessdeepstandby, true, 0, MAXBRIGHT, this, CRCInput::RC_nokey, NULL, 0, 0, NONEXISTANT_LOCALE, true);
 		nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESSDEEPSTANDBY);
 		nc->setActivateObserver(this);
 		mn_widget->addItem(nc);
 	}
 
-	nc = new CMenuOptionNumberChooser(LOCALE_LCDMENU_DIM_BRIGHTNESS, &g_settings.lcd_setting_dim_brightness, vfd_enabled, -1, 15, NULL, CRCInput::RC_nokey, NULL, 0, -1, LOCALE_OPTIONS_OFF, true);
+	nc = new CMenuOptionNumberChooser(LOCALE_LCDMENU_DIM_BRIGHTNESS, &g_settings.lcd_setting_dim_brightness, vfd_enabled, -1, MAXBRIGHT, NULL, CRCInput::RC_nokey, NULL, 0, -1, LOCALE_OPTIONS_OFF, true);
 	nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESSDIM);
 	nc->setActivateObserver(this);
 	mn_widget->addItem(nc);
--- neutrino-mp-cst-next_ni.org/src/gui/movieplayer.cpp
+++ neutrino-mp-cst-next_ni/src/gui/movieplayer.cpp
@@ -1654,7 +1654,15 @@
 					ss -= hh * 3600;
 					mm = ss/60;
 					ss -= mm * 60;
-					std::string Value = to_string(hh/10) + to_string(hh%10) + ":" + to_string(mm/10) + to_string(mm%10) + ":" + to_string(ss/10) + to_string(ss%10);
+#if defined(BOXMODEL_HS7810A) \
+ || defined(BOXMODEL_HS7119) \
+ || defined(BOXMODEL_HS7819)
+ 					std::string Value = to_string(mm/10) + to_string(mm%10) + ":" + to_string(ss/10) + to_string(ss%10);
+#elif defined(BOXMODEL_SPARK)
+ 					std::string Value = to_string(mm/10) + to_string(mm%10) + to_string(ss/10) + to_string(ss%10);
+#else
+  					std::string Value = to_string(hh/10) + to_string(hh%10) + ":" + to_string(mm/10) + to_string(mm%10) + ":" + to_string(ss/10) + to_string(ss%10);
+#endif
 					CVFD::getInstance()->setMode(CVFD::MODE_MENU_UTF8);
 					CVFD::getInstance()->showMenuText(0, Value.c_str(), -1, true);
 				}

